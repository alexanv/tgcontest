<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2134" onload="init(evt)" viewBox="0 0 1200 2134" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="2134.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="2117" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="2117" > </text>
<g id="frames">
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="460.1" y="1269" width="0.4" height="15.0" fill="rgb(242,173,34)" rx="2" ry="2" />
<text  x="463.14" y="1279.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="837" width="8.0" height="15.0" fill="rgb(244,177,47)" rx="2" ry="2" />
<text  x="62.09" y="847.5" ></text>
</g>
<g >
<title>c10::TensorImpl::shallow_copy_and_detach (3 samples, 0.02%)</title><rect x="641.8" y="2005" width="0.2" height="15.0" fill="rgb(223,16,39)" rx="2" ry="2" />
<text  x="644.76" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="901" width="8.0" height="15.0" fill="rgb(225,52,43)" rx="2" ry="2" />
<text  x="62.09" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.2" y="261" width="0.5" height="15.0" fill="rgb(207,90,51)" rx="2" ry="2" />
<text  x="1186.24" y="271.5" ></text>
</g>
<g >
<title>c10::TensorOptions::merge_in (2 samples, 0.01%)</title><rect x="751.0" y="2053" width="0.2" height="15.0" fill="rgb(208,206,6)" rx="2" ry="2" />
<text  x="754.04" y="2063.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (45 samples, 0.31%)</title><rect x="463.4" y="1925" width="3.6" height="15.0" fill="rgb(253,197,6)" rx="2" ry="2" />
<text  x="466.36" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.3" y="1413" width="0.1" height="15.0" fill="rgb(240,197,41)" rx="2" ry="2" />
<text  x="462.26" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1573" width="0.7" height="15.0" fill="rgb(237,161,6)" rx="2" ry="2" />
<text  x="1185.27" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="446.1" y="1573" width="0.1" height="15.0" fill="rgb(213,46,12)" rx="2" ry="2" />
<text  x="449.06" y="1583.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (2 samples, 0.01%)</title><rect x="1182.6" y="37" width="0.2" height="15.0" fill="rgb(229,190,32)" rx="2" ry="2" />
<text  x="1185.60" y="47.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="1173" width="8.0" height="15.0" fill="rgb(224,118,26)" rx="2" ry="2" />
<text  x="62.09" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1941" width="0.7" height="15.0" fill="rgb(250,183,28)" rx="2" ry="2" />
<text  x="1185.27" y="1951.5" ></text>
</g>
<g >
<title>at::native::mm_cpu_out (4 samples, 0.03%)</title><rect x="59.8" y="37" width="0.3" height="15.0" fill="rgb(238,18,41)" rx="2" ry="2" />
<text  x="62.81" y="47.5" ></text>
</g>
<g >
<title>at::Tensor::unsqueeze (7 samples, 0.05%)</title><rect x="472.2" y="1925" width="0.6" height="15.0" fill="rgb(215,11,36)" rx="2" ry="2" />
<text  x="475.21" y="1935.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getSubwords (7 samples, 0.05%)</title><rect x="75.5" y="2021" width="0.6" height="15.0" fill="rgb(254,97,4)" rx="2" ry="2" />
<text  x="78.50" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="1157" width="0.6" height="15.0" fill="rgb(235,175,18)" rx="2" ry="2" />
<text  x="1185.36" y="1167.5" ></text>
</g>
<g >
<title>ComputeDocumentNasty (2 samples, 0.01%)</title><rect x="454.6" y="1973" width="0.2" height="15.0" fill="rgb(225,27,35)" rx="2" ry="2" />
<text  x="457.59" y="1983.5" ></text>
</g>
<g >
<title>at::native::empty_cpu (3 samples, 0.02%)</title><rect x="479.9" y="1893" width="0.2" height="15.0" fill="rgb(251,50,9)" rx="2" ry="2" />
<text  x="482.86" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1893" width="0.7" height="15.0" fill="rgb(238,88,25)" rx="2" ry="2" />
<text  x="1185.27" y="1903.5" ></text>
</g>
<g >
<title>at::CPUType::empty_memory_format (4 samples, 0.03%)</title><rect x="636.4" y="1989" width="0.3" height="15.0" fill="rgb(234,178,35)" rx="2" ry="2" />
<text  x="639.37" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.2" y="341" width="0.5" height="15.0" fill="rgb(212,181,44)" rx="2" ry="2" />
<text  x="1186.24" y="351.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.01%)</title><rect x="444.9" y="1941" width="0.1" height="15.0" fill="rgb(216,8,15)" rx="2" ry="2" />
<text  x="447.86" y="1951.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="451.8" y="1989" width="0.1" height="15.0" fill="rgb(205,189,10)" rx="2" ry="2" />
<text  x="454.78" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1573" width="0.5" height="15.0" fill="rgb(226,212,6)" rx="2" ry="2" />
<text  x="1186.16" y="1583.5" ></text>
</g>
<g >
<title>at::native::legacy::cpu::_th_addmm_out (2 samples, 0.01%)</title><rect x="59.6" y="37" width="0.2" height="15.0" fill="rgb(211,132,38)" rx="2" ry="2" />
<text  x="62.65" y="47.5" ></text>
</g>
<g >
<title>at::native::(anonymous namespace)::fill_kernel (2 samples, 0.01%)</title><rect x="65.4" y="37" width="0.1" height="15.0" fill="rgb(217,221,50)" rx="2" ry="2" />
<text  x="68.36" y="47.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (2 samples, 0.01%)</title><rect x="71.5" y="2005" width="0.1" height="15.0" fill="rgb(236,147,5)" rx="2" ry="2" />
<text  x="74.48" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1461" width="0.5" height="15.0" fill="rgb(235,65,32)" rx="2" ry="2" />
<text  x="1186.16" y="1471.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::construct&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const&amp;&gt; (6 samples, 0.04%)</title><rect x="452.8" y="1989" width="0.5" height="15.0" fill="rgb(244,58,27)" rx="2" ry="2" />
<text  x="455.82" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1573" width="8.2" height="15.0" fill="rgb(243,201,37)" rx="2" ry="2" />
<text  x="62.01" y="1583.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="197" width="8.0" height="15.0" fill="rgb(249,174,31)" rx="2" ry="2" />
<text  x="62.09" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="965" width="0.6" height="15.0" fill="rgb(217,10,16)" rx="2" ry="2" />
<text  x="1185.36" y="975.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::construct&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const&amp;&gt; (3 samples, 0.02%)</title><rect x="453.9" y="1989" width="0.2" height="15.0" fill="rgb(248,214,53)" rx="2" ry="2" />
<text  x="456.87" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="421" width="8.0" height="15.0" fill="rgb(207,152,14)" rx="2" ry="2" />
<text  x="62.09" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;tg::EEmbeddingKey, std::pair&lt;tg::EEmbeddingKey const, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;tg::EEmbeddingKey const, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;tg::EEmbeddingKey&gt;, std::hash&lt;tg::EEmbeddingKey&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;tg::EEmbeddingKey const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt; (2 samples, 0.01%)</title><rect x="631.9" y="1957" width="0.1" height="15.0" fill="rgb(214,114,3)" rx="2" ry="2" />
<text  x="634.87" y="1967.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (27 samples, 0.18%)</title><rect x="127.2" y="2021" width="2.1" height="15.0" fill="rgb(221,70,14)" rx="2" ry="2" />
<text  x="130.16" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (20 samples, 0.14%)</title><rect x="458.9" y="1829" width="1.6" height="15.0" fill="rgb(216,184,19)" rx="2" ry="2" />
<text  x="461.94" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="735.5" y="2021" width="0.2" height="15.0" fill="rgb(241,9,46)" rx="2" ry="2" />
<text  x="738.51" y="2031.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::push_back (9 samples, 0.06%)</title><rect x="452.7" y="2005" width="0.8" height="15.0" fill="rgb(237,224,4)" rx="2" ry="2" />
<text  x="455.74" y="2015.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (22 samples, 0.15%)</title><rect x="447.4" y="1925" width="1.8" height="15.0" fill="rgb(227,220,16)" rx="2" ry="2" />
<text  x="450.43" y="1935.5" ></text>
</g>
<g >
<title>Sigmoid (4 samples, 0.03%)</title><rect x="429.6" y="1941" width="0.4" height="15.0" fill="rgb(218,106,14)" rx="2" ry="2" />
<text  x="432.65" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.2" y="277" width="0.5" height="15.0" fill="rgb(246,212,44)" rx="2" ry="2" />
<text  x="1186.24" y="287.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (12 samples, 0.08%)</title><rect x="47.0" y="2053" width="1.0" height="15.0" fill="rgb(231,90,5)" rx="2" ry="2" />
<text  x="50.02" y="2063.5" ></text>
</g>
<g >
<title>malloc (9 samples, 0.06%)</title><rect x="685.0" y="2021" width="0.7" height="15.0" fill="rgb(237,15,54)" rx="2" ry="2" />
<text  x="687.98" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="459.4" y="1429" width="0.3" height="15.0" fill="rgb(220,20,34)" rx="2" ry="2" />
<text  x="462.42" y="1439.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="636.0" y="1941" width="0.2" height="15.0" fill="rgb(245,149,12)" rx="2" ry="2" />
<text  x="638.97" y="1951.5" ></text>
</g>
<g >
<title>at::(anonymous namespace)::zeros (2 samples, 0.01%)</title><rect x="478.7" y="1877" width="0.2" height="15.0" fill="rgb(223,85,44)" rx="2" ry="2" />
<text  x="481.73" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="293" width="0.6" height="15.0" fill="rgb(213,45,54)" rx="2" ry="2" />
<text  x="1185.36" y="303.5" ></text>
</g>
<g >
<title>c10::TensorType::isSubtypeOfExt (3 samples, 0.02%)</title><rect x="642.7" y="2005" width="0.3" height="15.0" fill="rgb(232,110,39)" rx="2" ry="2" />
<text  x="645.73" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="459.3" y="1637" width="0.4" height="15.0" fill="rgb(233,37,48)" rx="2" ry="2" />
<text  x="462.26" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="445.9" y="1573" width="0.2" height="15.0" fill="rgb(231,199,0)" rx="2" ry="2" />
<text  x="448.90" y="1583.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare@plt (16 samples, 0.11%)</title><rect x="1176.6" y="2053" width="1.3" height="15.0" fill="rgb(219,101,18)" rx="2" ry="2" />
<text  x="1179.64" y="2063.5" ></text>
</g>
<g >
<title>c10::TensorImpl::compute_contiguous (2 samples, 0.01%)</title><rect x="636.5" y="1941" width="0.2" height="15.0" fill="rgb(246,216,1)" rx="2" ry="2" />
<text  x="639.53" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="459.5" y="1269" width="0.2" height="15.0" fill="rgb(247,72,47)" rx="2" ry="2" />
<text  x="462.50" y="1279.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="1141" width="8.0" height="15.0" fill="rgb(205,228,26)" rx="2" ry="2" />
<text  x="62.09" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="460.3" y="1157" width="0.2" height="15.0" fill="rgb(248,15,39)" rx="2" ry="2" />
<text  x="463.31" y="1167.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2 samples, 0.01%)</title><rect x="466.8" y="1909" width="0.2" height="15.0" fill="rgb(222,160,2)" rx="2" ry="2" />
<text  x="469.82" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="459.3" y="1541" width="0.4" height="15.0" fill="rgb(242,96,24)" rx="2" ry="2" />
<text  x="462.26" y="1551.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.02%)</title><rect x="452.5" y="1989" width="0.2" height="15.0" fill="rgb(224,220,47)" rx="2" ry="2" />
<text  x="455.50" y="1999.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (3 samples, 0.02%)</title><rect x="1185.4" y="2053" width="0.3" height="15.0" fill="rgb(219,63,0)" rx="2" ry="2" />
<text  x="1188.41" y="2063.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::future&lt;std::result_of&lt;std::optional&lt;TDbDocument&gt;  (2 samples, 0.01%)</title><rect x="47.6" y="2021" width="0.1" height="15.0" fill="rgb(236,86,12)" rx="2" ry="2" />
<text  x="50.58" y="2031.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (5 samples, 0.03%)</title><rect x="446.6" y="2005" width="0.4" height="15.0" fill="rgb(226,75,51)" rx="2" ry="2" />
<text  x="449.63" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="446.1" y="1493" width="0.1" height="15.0" fill="rgb(208,197,25)" rx="2" ry="2" />
<text  x="449.06" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1183.1" y="1701" width="0.6" height="15.0" fill="rgb(239,110,48)" rx="2" ry="2" />
<text  x="1186.08" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="341" width="8.0" height="15.0" fill="rgb(223,164,8)" rx="2" ry="2" />
<text  x="62.09" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (3 samples, 0.02%)</title><rect x="632.2" y="1973" width="0.2" height="15.0" fill="rgb(231,176,25)" rx="2" ry="2" />
<text  x="635.19" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="613" width="0.6" height="15.0" fill="rgb(244,188,1)" rx="2" ry="2" />
<text  x="1185.36" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="446.1" y="1477" width="0.1" height="15.0" fill="rgb(220,85,17)" rx="2" ry="2" />
<text  x="449.06" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="421" width="0.6" height="15.0" fill="rgb(252,54,17)" rx="2" ry="2" />
<text  x="1185.36" y="431.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (12 samples, 0.08%)</title><rect x="440.4" y="1925" width="1.0" height="15.0" fill="rgb(218,196,36)" rx="2" ry="2" />
<text  x="443.43" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="459.3" y="1493" width="0.4" height="15.0" fill="rgb(244,37,13)" rx="2" ry="2" />
<text  x="462.26" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="445.9" y="1845" width="0.3" height="15.0" fill="rgb(229,224,12)" rx="2" ry="2" />
<text  x="448.90" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.2" y="149" width="0.5" height="15.0" fill="rgb(210,17,2)" rx="2" ry="2" />
<text  x="1186.24" y="159.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1333" width="8.1" height="15.0" fill="rgb(251,176,21)" rx="2" ry="2" />
<text  x="62.09" y="1343.5" ></text>
</g>
<g >
<title>TDocument::TDocument (2 samples, 0.01%)</title><rect x="174.7" y="1973" width="0.2" height="15.0" fill="rgb(249,34,44)" rx="2" ry="2" />
<text  x="177.72" y="1983.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="55.5" y="1973" width="0.2" height="15.0" fill="rgb(233,19,2)" rx="2" ry="2" />
<text  x="58.47" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="460.1" y="1413" width="0.4" height="15.0" fill="rgb(219,178,41)" rx="2" ry="2" />
<text  x="463.14" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.2" y="293" width="0.5" height="15.0" fill="rgb(225,167,40)" rx="2" ry="2" />
<text  x="1186.24" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1429" width="0.5" height="15.0" fill="rgb(224,34,9)" rx="2" ry="2" />
<text  x="1186.16" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.5" y="1285" width="0.2" height="15.0" fill="rgb(231,154,49)" rx="2" ry="2" />
<text  x="462.50" y="1295.5" ></text>
</g>
<g >
<title>c10::impl::ExcludeDispatchKeyGuard::ExcludeDispatchKeyGuard (2 samples, 0.01%)</title><rect x="73.7" y="2021" width="0.2" height="15.0" fill="rgb(207,182,2)" rx="2" ry="2" />
<text  x="76.73" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1381" width="0.5" height="15.0" fill="rgb(241,189,45)" rx="2" ry="2" />
<text  x="1186.16" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="460.1" y="1285" width="0.4" height="15.0" fill="rgb(241,228,24)" rx="2" ry="2" />
<text  x="463.14" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="446.1" y="1621" width="0.1" height="15.0" fill="rgb(214,11,14)" rx="2" ry="2" />
<text  x="449.06" y="1631.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::add_Tensor (3 samples, 0.02%)</title><rect x="1153.0" y="1925" width="0.2" height="15.0" fill="rgb(248,93,42)" rx="2" ry="2" />
<text  x="1155.98" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="445.9" y="1685" width="0.2" height="15.0" fill="rgb(250,120,34)" rx="2" ry="2" />
<text  x="448.90" y="1695.5" ></text>
</g>
<g >
<title>__libc_start_main (3,485 samples, 23.77%)</title><rect x="173.8" y="2037" width="280.4" height="15.0" fill="rgb(252,15,19)" rx="2" ry="2" />
<text  x="176.75" y="2047.5" >__libc_start_main</text>
</g>
<g >
<title>onmt::add_final_token&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (5 samples, 0.03%)</title><rect x="71.1" y="2005" width="0.4" height="15.0" fill="rgb(250,66,8)" rx="2" ry="2" />
<text  x="74.08" y="2015.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.01%)</title><rect x="445.0" y="1941" width="0.2" height="15.0" fill="rgb(209,27,21)" rx="2" ry="2" />
<text  x="448.02" y="1951.5" ></text>
</g>
<g >
<title>torch::autograd::DifferentiableViewMeta::~DifferentiableViewMeta (3 samples, 0.02%)</title><rect x="642.5" y="2005" width="0.2" height="15.0" fill="rgb(205,220,40)" rx="2" ry="2" />
<text  x="645.49" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1349" width="8.1" height="15.0" fill="rgb(224,34,14)" rx="2" ry="2" />
<text  x="62.09" y="1359.5" ></text>
</g>
<g >
<title>at::TensorIterator::reduce_op (5 samples, 0.03%)</title><rect x="749.1" y="2021" width="0.4" height="15.0" fill="rgb(234,31,13)" rx="2" ry="2" />
<text  x="752.11" y="2031.5" ></text>
</g>
<g >
<title>malloc@plt (5 samples, 0.03%)</title><rect x="669.6" y="2037" width="0.4" height="15.0" fill="rgb(222,15,30)" rx="2" ry="2" />
<text  x="672.61" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="981" width="0.5" height="15.0" fill="rgb(220,58,38)" rx="2" ry="2" />
<text  x="1186.16" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="229" width="0.6" height="15.0" fill="rgb(247,48,9)" rx="2" ry="2" />
<text  x="1185.36" y="239.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (76 samples, 0.52%)</title><rect x="182.3" y="1925" width="6.1" height="15.0" fill="rgb(241,13,30)" rx="2" ry="2" />
<text  x="185.28" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="629" width="0.5" height="15.0" fill="rgb(235,164,22)" rx="2" ry="2" />
<text  x="1186.16" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="1349" width="0.6" height="15.0" fill="rgb(233,216,45)" rx="2" ry="2" />
<text  x="1185.36" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="459.3" y="1573" width="0.4" height="15.0" fill="rgb(206,216,50)" rx="2" ry="2" />
<text  x="462.26" y="1583.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::dotRow (9 samples, 0.06%)</title><rect x="763.8" y="2053" width="0.7" height="15.0" fill="rgb(218,168,47)" rx="2" ry="2" />
<text  x="766.75" y="2063.5" ></text>
</g>
<g >
<title>torch::autograd::compute_requires_grad&lt;at::Tensor const&amp;&gt; (2 samples, 0.01%)</title><rect x="472.1" y="1909" width="0.1" height="15.0" fill="rgb(237,143,31)" rx="2" ry="2" />
<text  x="475.05" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="2037" width="0.7" height="15.0" fill="rgb(206,40,50)" rx="2" ry="2" />
<text  x="1185.27" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="821" width="8.0" height="15.0" fill="rgb(236,195,41)" rx="2" ry="2" />
<text  x="62.09" y="831.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (43 samples, 0.29%)</title><rect x="1178.3" y="2053" width="3.5" height="15.0" fill="rgb(226,60,51)" rx="2" ry="2" />
<text  x="1181.33" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="741" width="8.0" height="15.0" fill="rgb(213,143,24)" rx="2" ry="2" />
<text  x="62.09" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="1285" width="0.6" height="15.0" fill="rgb(220,71,29)" rx="2" ry="2" />
<text  x="1185.36" y="1295.5" ></text>
</g>
<g >
<title>at::native::make_reduction (9 samples, 0.06%)</title><rect x="748.9" y="2053" width="0.8" height="15.0" fill="rgb(253,115,51)" rx="2" ry="2" />
<text  x="751.95" y="2063.5" ></text>
</g>
<g >
<title>c10::KernelFunction::make_boxed_function&lt;&amp;(anonymous namespace)::variable_fallback_kernel&gt; (8 samples, 0.05%)</title><rect x="750.1" y="2053" width="0.6" height="15.0" fill="rgb(211,122,3)" rx="2" ry="2" />
<text  x="753.08" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="1125" width="8.0" height="15.0" fill="rgb(250,38,20)" rx="2" ry="2" />
<text  x="62.09" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="445.9" y="1781" width="0.3" height="15.0" fill="rgb(226,185,35)" rx="2" ry="2" />
<text  x="448.90" y="1791.5" ></text>
</g>
<g >
<title>GetHost (5 samples, 0.03%)</title><rect x="445.8" y="1957" width="0.4" height="15.0" fill="rgb(219,224,53)" rx="2" ry="2" />
<text  x="448.82" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1797" width="8.2" height="15.0" fill="rgb(215,65,1)" rx="2" ry="2" />
<text  x="62.01" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="1093" width="0.6" height="15.0" fill="rgb(241,223,5)" rx="2" ry="2" />
<text  x="1185.36" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="549" width="0.6" height="15.0" fill="rgb(223,19,39)" rx="2" ry="2" />
<text  x="1185.36" y="559.5" ></text>
</g>
<g >
<title>at::CPUType::empty_memory_format (2 samples, 0.01%)</title><rect x="55.1" y="1989" width="0.2" height="15.0" fill="rgb(229,4,3)" rx="2" ry="2" />
<text  x="58.14" y="1999.5" ></text>
</g>
<g >
<title>GetHost (22 samples, 0.15%)</title><rect x="458.8" y="1957" width="1.7" height="15.0" fill="rgb(234,99,34)" rx="2" ry="2" />
<text  x="461.78" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1621" width="8.2" height="15.0" fill="rgb(243,63,28)" rx="2" ry="2" />
<text  x="62.01" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="459.8" y="1685" width="0.7" height="15.0" fill="rgb(222,38,25)" rx="2" ry="2" />
<text  x="462.82" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1525" width="0.5" height="15.0" fill="rgb(251,111,22)" rx="2" ry="2" />
<text  x="1186.16" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="197" width="0.6" height="15.0" fill="rgb(246,52,45)" rx="2" ry="2" />
<text  x="1185.36" y="207.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (6 samples, 0.04%)</title><rect x="447.6" y="1893" width="0.5" height="15.0" fill="rgb(224,182,26)" rx="2" ry="2" />
<text  x="450.59" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="445.9" y="1877" width="0.3" height="15.0" fill="rgb(247,148,31)" rx="2" ry="2" />
<text  x="448.90" y="1887.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (7 samples, 0.05%)</title><rect x="448.1" y="1909" width="0.5" height="15.0" fill="rgb(233,86,28)" rx="2" ry="2" />
<text  x="451.07" y="1919.5" ></text>
</g>
<g >
<title>c10::TensorImpl::set_sizes_contiguous (2 samples, 0.01%)</title><rect x="636.5" y="1957" width="0.2" height="15.0" fill="rgb(210,115,16)" rx="2" ry="2" />
<text  x="639.53" y="1967.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.05%)</title><rect x="126.3" y="2021" width="0.5" height="15.0" fill="rgb(238,197,27)" rx="2" ry="2" />
<text  x="129.28" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (6 samples, 0.04%)</title><rect x="735.8" y="2021" width="0.5" height="15.0" fill="rgb(236,14,12)" rx="2" ry="2" />
<text  x="738.83" y="2031.5" ></text>
</g>
<g >
<title>TEmbedder::CalcEmbedding (2,028 samples, 13.83%)</title><rect x="467.5" y="1957" width="163.2" height="15.0" fill="rgb(235,21,31)" rx="2" ry="2" />
<text  x="470.55" y="1967.5" >TEmbedder::CalcEmbedd..</text>
</g>
<g >
<title>fasttext::Vector::addRow (13 samples, 0.09%)</title><rect x="78.3" y="2021" width="1.1" height="15.0" fill="rgb(236,1,52)" rx="2" ry="2" />
<text  x="81.32" y="2031.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (5 samples, 0.03%)</title><rect x="453.5" y="2005" width="0.4" height="15.0" fill="rgb(206,226,18)" rx="2" ry="2" />
<text  x="456.47" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.2" y="325" width="0.5" height="15.0" fill="rgb(214,77,28)" rx="2" ry="2" />
<text  x="1186.24" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="459.3" y="1653" width="0.4" height="15.0" fill="rgb(243,140,7)" rx="2" ry="2" />
<text  x="462.26" y="1663.5" ></text>
</g>
<g >
<title>c10::TensorImpl::copy_tensor_metadata (8 samples, 0.05%)</title><rect x="640.6" y="2005" width="0.7" height="15.0" fill="rgb(214,33,25)" rx="2" ry="2" />
<text  x="643.64" y="2015.5" ></text>
</g>
<g >
<title>TNewsCluster::~TNewsCluster (3 samples, 0.02%)</title><rect x="428.3" y="2005" width="0.2" height="15.0" fill="rgb(218,158,46)" rx="2" ry="2" />
<text  x="431.28" y="2015.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (4 samples, 0.03%)</title><rect x="728.6" y="2037" width="0.3" height="15.0" fill="rgb(217,214,0)" rx="2" ry="2" />
<text  x="731.59" y="2047.5" ></text>
</g>
<g >
<title>kmp_flag_64::wait (152 samples, 1.04%)</title><rect x="1000.3" y="2053" width="12.3" height="15.0" fill="rgb(215,161,11)" rx="2" ry="2" />
<text  x="1003.33" y="2063.5" ></text>
</g>
<g >
<title>TAlexaAgencyRating::ScoreUrl (3 samples, 0.02%)</title><rect x="445.2" y="1957" width="0.2" height="15.0" fill="rgb(207,52,9)" rx="2" ry="2" />
<text  x="448.18" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1317" width="0.5" height="15.0" fill="rgb(212,30,46)" rx="2" ry="2" />
<text  x="1186.16" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.2" y="405" width="0.5" height="15.0" fill="rgb(228,10,41)" rx="2" ry="2" />
<text  x="1186.24" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="373" width="0.6" height="15.0" fill="rgb(226,87,40)" rx="2" ry="2" />
<text  x="1185.36" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="460.1" y="1589" width="0.4" height="15.0" fill="rgb(250,28,44)" rx="2" ry="2" />
<text  x="463.06" y="1599.5" ></text>
</g>
<g >
<title>at::native::mm_cpu (2 samples, 0.01%)</title><rect x="73.2" y="2021" width="0.1" height="15.0" fill="rgb(234,80,28)" rx="2" ry="2" />
<text  x="76.17" y="2031.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (34 samples, 0.23%)</title><rect x="725.9" y="2037" width="2.7" height="15.0" fill="rgb(224,99,12)" rx="2" ry="2" />
<text  x="728.85" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="446.1" y="1717" width="0.1" height="15.0" fill="rgb(226,73,11)" rx="2" ry="2" />
<text  x="449.06" y="1727.5" ></text>
</g>
<g >
<title>fasttext::FastText::getWordVector (21 samples, 0.14%)</title><rect x="610.2" y="1941" width="1.7" height="15.0" fill="rgb(213,112,11)" rx="2" ry="2" />
<text  x="613.22" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="789" width="0.6" height="15.0" fill="rgb(230,173,14)" rx="2" ry="2" />
<text  x="1185.36" y="799.5" ></text>
</g>
<g >
<title>std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;::~vector (2 samples, 0.01%)</title><rect x="638.6" y="1973" width="0.2" height="15.0" fill="rgb(211,226,29)" rx="2" ry="2" />
<text  x="641.63" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="636.0" y="1957" width="0.2" height="15.0" fill="rgb(213,33,26)" rx="2" ry="2" />
<text  x="638.97" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1397" width="0.5" height="15.0" fill="rgb(241,173,22)" rx="2" ry="2" />
<text  x="1186.16" y="1407.5" ></text>
</g>
<g >
<title>TSlinkClustering::ClusterBatch (2,938 samples, 20.04%)</title><rect x="190.3" y="1973" width="236.4" height="15.0" fill="rgb(211,29,49)" rx="2" ry="2" />
<text  x="193.25" y="1983.5" >TSlinkClustering::ClusterBatch</text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="1013" width="8.0" height="15.0" fill="rgb(219,183,15)" rx="2" ry="2" />
<text  x="62.09" y="1023.5" ></text>
</g>
<g >
<title>torch::autograd::generated::SqueezeBackward1::~SqueezeBackward1 (3 samples, 0.02%)</title><rect x="1189.7" y="2053" width="0.2" height="15.0" fill="rgb(215,145,37)" rx="2" ry="2" />
<text  x="1192.68" y="2063.5" ></text>
</g>
<g >
<title>at::Tensor::options (2 samples, 0.01%)</title><rect x="746.6" y="2053" width="0.2" height="15.0" fill="rgb(215,163,41)" rx="2" ry="2" />
<text  x="749.61" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1183.1" y="1925" width="0.6" height="15.0" fill="rgb(224,92,54)" rx="2" ry="2" />
<text  x="1186.08" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="101" width="0.6" height="15.0" fill="rgb(214,122,22)" rx="2" ry="2" />
<text  x="1185.36" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="1301" width="0.6" height="15.0" fill="rgb(245,95,45)" rx="2" ry="2" />
<text  x="1185.36" y="1311.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1493" width="8.1" height="15.0" fill="rgb(239,167,37)" rx="2" ry="2" />
<text  x="62.09" y="1503.5" ></text>
</g>
<g >
<title>at::native::(anonymous namespace)::div_kernel (2 samples, 0.01%)</title><rect x="632.8" y="2005" width="0.1" height="15.0" fill="rgb(207,24,28)" rx="2" ry="2" />
<text  x="635.75" y="2015.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2 samples, 0.01%)</title><rect x="449.7" y="1941" width="0.1" height="15.0" fill="rgb(221,104,10)" rx="2" ry="2" />
<text  x="452.68" y="1951.5" ></text>
</g>
<g >
<title>fasttext::Model::State::State (2 samples, 0.01%)</title><rect x="69.5" y="2005" width="0.1" height="15.0" fill="rgb(224,149,24)" rx="2" ry="2" />
<text  x="72.47" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (967 samples, 6.59%)</title><rect x="53.9" y="2037" width="77.8" height="15.0" fill="rgb(216,145,28)" rx="2" ry="2" />
<text  x="56.94" y="2047.5" >[unknown]</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="460.3" y="1189" width="0.2" height="15.0" fill="rgb(221,10,49)" rx="2" ry="2" />
<text  x="463.31" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.2" y="389" width="0.5" height="15.0" fill="rgb(229,214,4)" rx="2" ry="2" />
<text  x="1186.24" y="399.5" ></text>
</g>
<g >
<title>at::native::fill_ (2 samples, 0.01%)</title><rect x="63.2" y="37" width="0.2" height="15.0" fill="rgb(217,111,38)" rx="2" ry="2" />
<text  x="66.19" y="47.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="628.2" y="1941" width="0.2" height="15.0" fill="rgb(239,201,20)" rx="2" ry="2" />
<text  x="631.24" y="1951.5" ></text>
</g>
<g >
<title>caffe2::detail::_New&lt;float&gt; (34 samples, 0.23%)</title><rect x="751.6" y="2053" width="2.7" height="15.0" fill="rgb(208,151,47)" rx="2" ry="2" />
<text  x="754.60" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1509" width="0.7" height="15.0" fill="rgb(213,36,10)" rx="2" ry="2" />
<text  x="1185.27" y="1519.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::str[abi:cxx11] (4 samples, 0.03%)</title><rect x="674.6" y="2037" width="0.3" height="15.0" fill="rgb(226,53,44)" rx="2" ry="2" />
<text  x="677.59" y="2047.5" ></text>
</g>
<g >
<title>cfree (18 samples, 0.12%)</title><rect x="645.4" y="2037" width="1.4" height="15.0" fill="rgb(234,65,15)" rx="2" ry="2" />
<text  x="648.38" y="2047.5" ></text>
</g>
<g >
<title>at::native::DispatchStub&lt;void  (3 samples, 0.02%)</title><rect x="1151.2" y="1877" width="0.3" height="15.0" fill="rgb(249,61,40)" rx="2" ry="2" />
<text  x="1154.21" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (21 samples, 0.14%)</title><rect x="458.9" y="1845" width="1.6" height="15.0" fill="rgb(220,51,49)" rx="2" ry="2" />
<text  x="461.86" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="428.4" y="1989" width="0.1" height="15.0" fill="rgb(250,84,20)" rx="2" ry="2" />
<text  x="431.36" y="1999.5" ></text>
</g>
<g >
<title>rocksdb::PessimisticTransactionDB::SingleDelete (92 samples, 0.63%)</title><rect x="1147.0" y="2053" width="7.4" height="15.0" fill="rgb(226,198,48)" rx="2" ry="2" />
<text  x="1150.03" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1525" width="8.1" height="15.0" fill="rgb(217,149,10)" rx="2" ry="2" />
<text  x="62.09" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1029" width="0.5" height="15.0" fill="rgb(214,102,52)" rx="2" ry="2" />
<text  x="1186.16" y="1039.5" ></text>
</g>
<g >
<title>cfree (114 samples, 0.78%)</title><rect x="754.3" y="2053" width="9.2" height="15.0" fill="rgb(220,107,21)" rx="2" ry="2" />
<text  x="757.34" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="469" width="8.0" height="15.0" fill="rgb(240,8,41)" rx="2" ry="2" />
<text  x="62.09" y="479.5" ></text>
</g>
<g >
<title>at::native::mm_cpu_out (4 samples, 0.03%)</title><rect x="64.2" y="85" width="0.3" height="15.0" fill="rgb(207,220,1)" rx="2" ry="2" />
<text  x="67.16" y="95.5" ></text>
</g>
<g >
<title>std::__move_merge&lt;TDbDocument*, __gnu_cxx::__normal_iterator&lt;TDbDocument*, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (8 samples, 0.05%)</title><rect x="427.0" y="1957" width="0.6" height="15.0" fill="rgb(223,137,51)" rx="2" ry="2" />
<text  x="429.99" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="1205" width="8.0" height="15.0" fill="rgb(229,146,38)" rx="2" ry="2" />
<text  x="62.09" y="1215.5" ></text>
</g>
<g >
<title>cfree (2 samples, 0.01%)</title><rect x="631.1" y="1957" width="0.2" height="15.0" fill="rgb(205,45,37)" rx="2" ry="2" />
<text  x="634.14" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="821" width="0.5" height="15.0" fill="rgb(243,131,54)" rx="2" ry="2" />
<text  x="1186.16" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1637" width="0.5" height="15.0" fill="rgb(214,153,6)" rx="2" ry="2" />
<text  x="1186.16" y="1647.5" ></text>
</g>
<g >
<title>at::native::norm_out (10 samples, 0.07%)</title><rect x="1151.6" y="1877" width="0.8" height="15.0" fill="rgb(221,8,21)" rx="2" ry="2" />
<text  x="1154.62" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1183.1" y="1893" width="0.6" height="15.0" fill="rgb(235,205,48)" rx="2" ry="2" />
<text  x="1186.08" y="1903.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (16 samples, 0.11%)</title><rect x="61.7" y="37" width="1.2" height="15.0" fill="rgb(253,113,29)" rx="2" ry="2" />
<text  x="64.66" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="725" width="0.5" height="15.0" fill="rgb(240,208,40)" rx="2" ry="2" />
<text  x="1186.16" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1183.1" y="1749" width="0.6" height="15.0" fill="rgb(211,131,36)" rx="2" ry="2" />
<text  x="1186.08" y="1759.5" ></text>
</g>
<g >
<title>nlohmann::detail::parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::sax_parse_internal&lt;nlohmann::detail::json_sax_dom_parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; (161 samples, 1.10%)</title><rect x="175.5" y="1957" width="13.0" height="15.0" fill="rgb(254,203,26)" rx="2" ry="2" />
<text  x="178.53" y="1967.5" ></text>
</g>
<g >
<title>cfree (3 samples, 0.02%)</title><rect x="69.1" y="2005" width="0.3" height="15.0" fill="rgb(230,44,20)" rx="2" ry="2" />
<text  x="72.14" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.03%)</title><rect x="47.0" y="2037" width="0.3" height="15.0" fill="rgb(216,146,12)" rx="2" ry="2" />
<text  x="50.02" y="2047.5" ></text>
</g>
<g >
<title>fasttext::QuantMatrix::addRowToVector (66 samples, 0.45%)</title><rect x="995.0" y="2053" width="5.3" height="15.0" fill="rgb(227,69,14)" rx="2" ry="2" />
<text  x="998.02" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 0.05%)</title><rect x="643.0" y="2005" width="0.6" height="15.0" fill="rgb(238,36,31)" rx="2" ry="2" />
<text  x="645.97" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.2" y="197" width="0.5" height="15.0" fill="rgb(249,177,3)" rx="2" ry="2" />
<text  x="1186.24" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="1109" width="0.6" height="15.0" fill="rgb(215,201,2)" rx="2" ry="2" />
<text  x="1185.36" y="1119.5" ></text>
</g>
<g >
<title>__libc_read (2 samples, 0.01%)</title><rect x="173.6" y="2037" width="0.2" height="15.0" fill="rgb(225,196,46)" rx="2" ry="2" />
<text  x="176.59" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.2" y="53" width="0.5" height="15.0" fill="rgb(233,224,1)" rx="2" ry="2" />
<text  x="1186.24" y="63.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node::operator (2 samples, 0.01%)</title><rect x="1154.6" y="2053" width="0.2" height="15.0" fill="rgb(222,120,2)" rx="2" ry="2" />
<text  x="1157.59" y="2063.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (5 samples, 0.03%)</title><rect x="75.1" y="2021" width="0.4" height="15.0" fill="rgb(216,27,19)" rx="2" ry="2" />
<text  x="78.10" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1445" width="0.5" height="15.0" fill="rgb(227,212,21)" rx="2" ry="2" />
<text  x="1186.16" y="1455.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.03%)</title><rect x="431.2" y="1925" width="0.4" height="15.0" fill="rgb(239,207,15)" rx="2" ry="2" />
<text  x="434.18" y="1935.5" ></text>
</g>
<g >
<title>at::native::(anonymous namespace)::add_kernel (2 samples, 0.01%)</title><rect x="1151.3" y="1845" width="0.2" height="15.0" fill="rgb(215,182,52)" rx="2" ry="2" />
<text  x="1154.29" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="459.3" y="1605" width="0.4" height="15.0" fill="rgb(247,226,21)" rx="2" ry="2" />
<text  x="462.26" y="1615.5" ></text>
</g>
<g >
<title>at::native::fill_out (2 samples, 0.01%)</title><rect x="65.4" y="53" width="0.1" height="15.0" fill="rgb(218,96,19)" rx="2" ry="2" />
<text  x="68.36" y="63.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1685" width="8.2" height="15.0" fill="rgb(233,147,49)" rx="2" ry="2" />
<text  x="62.01" y="1695.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (8 samples, 0.05%)</title><rect x="451.1" y="1989" width="0.7" height="15.0" fill="rgb(253,67,40)" rx="2" ry="2" />
<text  x="454.13" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (21 samples, 0.14%)</title><rect x="458.9" y="1877" width="1.6" height="15.0" fill="rgb(210,26,33)" rx="2" ry="2" />
<text  x="461.86" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="517" width="0.6" height="15.0" fill="rgb(214,12,7)" rx="2" ry="2" />
<text  x="1185.36" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_range_insert&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (2 samples, 0.01%)</title><rect x="1186.8" y="2053" width="0.1" height="15.0" fill="rgb(205,135,21)" rx="2" ry="2" />
<text  x="1189.78" y="2063.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (14 samples, 0.10%)</title><rect x="677.7" y="2037" width="1.2" height="15.0" fill="rgb(224,83,48)" rx="2" ry="2" />
<text  x="680.73" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="661" width="0.5" height="15.0" fill="rgb(251,164,28)" rx="2" ry="2" />
<text  x="1186.16" y="671.5" ></text>
</g>
<g >
<title>c10::KernelFunction::callBoxed (2 samples, 0.01%)</title><rect x="749.9" y="2053" width="0.2" height="15.0" fill="rgb(225,129,14)" rx="2" ry="2" />
<text  x="752.91" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="445.9" y="1637" width="0.2" height="15.0" fill="rgb(254,173,19)" rx="2" ry="2" />
<text  x="448.90" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="460.1" y="1461" width="0.4" height="15.0" fill="rgb(229,136,36)" rx="2" ry="2" />
<text  x="463.14" y="1471.5" ></text>
</g>
<g >
<title>Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;float, float&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;float, float&gt;, Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_opposite_op&lt;float&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::ArrayWrapper&lt;Eigen::Product&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;, 0&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt;, Eigen::internal::assign_op&lt;float, float&gt; &gt; (116 samples, 0.79%)</title><rect x="416.9" y="1941" width="9.3" height="15.0" fill="rgb(247,33,8)" rx="2" ry="2" />
<text  x="419.85" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1541" width="8.1" height="15.0" fill="rgb(217,184,48)" rx="2" ry="2" />
<text  x="62.09" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1445" width="0.7" height="15.0" fill="rgb(242,2,9)" rx="2" ry="2" />
<text  x="1185.27" y="1455.5" ></text>
</g>
<g >
<title>tgnews (14,664 samples, 100.00%)</title><rect x="10.0" y="2069" width="1180.0" height="15.0" fill="rgb(253,150,4)" rx="2" ry="2" />
<text  x="13.00" y="2079.5" >tgnews</text>
</g>
<g >
<title>c10::Dispatcher::callUnboxed&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Storage, long, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt; &gt; (12 samples, 0.08%)</title><rect x="476.0" y="1861" width="1.0" height="15.0" fill="rgb(240,57,30)" rx="2" ry="2" />
<text  x="479.00" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="533" width="8.0" height="15.0" fill="rgb(217,118,53)" rx="2" ry="2" />
<text  x="62.09" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="965" width="0.5" height="15.0" fill="rgb(228,178,2)" rx="2" ry="2" />
<text  x="1186.16" y="975.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::div_Tensor (2 samples, 0.01%)</title><rect x="735.7" y="1989" width="0.1" height="15.0" fill="rgb(234,224,50)" rx="2" ry="2" />
<text  x="738.67" y="1999.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (2,212 samples, 15.08%)</title><rect x="454.4" y="2005" width="178.0" height="15.0" fill="rgb(205,63,41)" rx="2" ry="2" />
<text  x="457.43" y="2015.5" >std::_Function_handler&lt;..</text>
</g>
<g >
<title>onmt::AnnotatedToken::set (12 samples, 0.08%)</title><rect x="673.5" y="2037" width="0.9" height="15.0" fill="rgb(220,167,17)" rx="2" ry="2" />
<text  x="676.47" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="1205" width="0.6" height="15.0" fill="rgb(224,9,44)" rx="2" ry="2" />
<text  x="1185.36" y="1215.5" ></text>
</g>
<g >
<title>std::locale::operator= (2 samples, 0.01%)</title><rect x="47.2" y="2021" width="0.1" height="15.0" fill="rgb(205,148,47)" rx="2" ry="2" />
<text  x="50.18" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="459.0" y="1749" width="0.7" height="15.0" fill="rgb(220,99,2)" rx="2" ry="2" />
<text  x="462.02" y="1759.5" ></text>
</g>
<g >
<title>TAlexaAgencyRating::GetCountryShare (4 samples, 0.03%)</title><rect x="444.9" y="1957" width="0.3" height="15.0" fill="rgb(241,170,33)" rx="2" ry="2" />
<text  x="447.86" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.2" y="165" width="0.5" height="15.0" fill="rgb(244,118,14)" rx="2" ry="2" />
<text  x="1186.24" y="175.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="1077" width="8.0" height="15.0" fill="rgb(235,196,15)" rx="2" ry="2" />
<text  x="62.09" y="1087.5" ></text>
</g>
<g >
<title>at::CPUType::empty_memory_format (7 samples, 0.05%)</title><rect x="479.9" y="1909" width="0.5" height="15.0" fill="rgb(240,208,27)" rx="2" ry="2" />
<text  x="482.86" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="213" width="0.6" height="15.0" fill="rgb(244,99,1)" rx="2" ry="2" />
<text  x="1185.36" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="459.3" y="1477" width="0.4" height="15.0" fill="rgb(233,213,26)" rx="2" ry="2" />
<text  x="462.26" y="1487.5" ></text>
</g>
<g >
<title>c10::UndefinedTensorImpl::~UndefinedTensorImpl (20 samples, 0.14%)</title><rect x="643.0" y="2037" width="1.6" height="15.0" fill="rgb(247,186,7)" rx="2" ry="2" />
<text  x="645.97" y="2047.5" ></text>
</g>
<g >
<title>std::__find_if&lt;std::pair&lt;tg::ECategory, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const*, __gnu_cxx::__ops::_Iter_pred&lt;void tg::from_json&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (3 samples, 0.02%)</title><rect x="456.8" y="1925" width="0.3" height="15.0" fill="rgb(214,229,14)" rx="2" ry="2" />
<text  x="459.85" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.55%)</title><rect x="59.1" y="101" width="6.4" height="15.0" fill="rgb(233,53,26)" rx="2" ry="2" />
<text  x="62.09" y="111.5" ></text>
</g>
<g >
<title>c10::intrusive_ptr&lt;c10::TensorImpl, c10::UndefinedTensorImpl&gt;::reset_ (4 samples, 0.03%)</title><rect x="644.0" y="2005" width="0.3" height="15.0" fill="rgb(249,137,53)" rx="2" ry="2" />
<text  x="647.02" y="2015.5" ></text>
</g>
<g >
<title>torch::autograd::TraceableFunction::TraceableFunction (2 samples, 0.01%)</title><rect x="734.5" y="2037" width="0.1" height="15.0" fill="rgb(236,218,50)" rx="2" ry="2" />
<text  x="737.46" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="1317" width="0.6" height="15.0" fill="rgb(227,160,11)" rx="2" ry="2" />
<text  x="1185.36" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="459.8" y="1701" width="0.7" height="15.0" fill="rgb(239,223,17)" rx="2" ry="2" />
<text  x="462.82" y="1711.5" ></text>
</g>
<g >
<title>c10::IValue::type (2 samples, 0.01%)</title><rect x="1148.2" y="1957" width="0.2" height="15.0" fill="rgb(226,139,20)" rx="2" ry="2" />
<text  x="1151.24" y="1967.5" ></text>
</g>
<g >
<title>c10::KernelFunction::callUnboxed&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor const&amp;, bool&gt; (12 samples, 0.08%)</title><rect x="474.0" y="1925" width="1.0" height="15.0" fill="rgb(210,171,13)" rx="2" ry="2" />
<text  x="476.99" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="460.2" y="1253" width="0.3" height="15.0" fill="rgb(236,201,8)" rx="2" ry="2" />
<text  x="463.23" y="1263.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (2 samples, 0.01%)</title><rect x="475.0" y="1925" width="0.1" height="15.0" fill="rgb(211,141,8)" rx="2" ry="2" />
<text  x="477.95" y="1935.5" ></text>
</g>
<g >
<title>at::native::norm (12 samples, 0.08%)</title><rect x="1151.5" y="1909" width="1.0" height="15.0" fill="rgb(252,171,24)" rx="2" ry="2" />
<text  x="1154.54" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1589" width="0.7" height="15.0" fill="rgb(206,52,24)" rx="2" ry="2" />
<text  x="1185.27" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.2" y="421" width="0.5" height="15.0" fill="rgb(242,92,51)" rx="2" ry="2" />
<text  x="1186.24" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1589" width="0.5" height="15.0" fill="rgb(249,205,7)" rx="2" ry="2" />
<text  x="1186.16" y="1599.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (6 samples, 0.04%)</title><rect x="631.4" y="1957" width="0.5" height="15.0" fill="rgb(228,52,8)" rx="2" ry="2" />
<text  x="634.38" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1781" width="8.2" height="15.0" fill="rgb(216,34,11)" rx="2" ry="2" />
<text  x="62.01" y="1791.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (4 samples, 0.03%)</title><rect x="1163.3" y="2037" width="0.3" height="15.0" fill="rgb(240,87,23)" rx="2" ry="2" />
<text  x="1166.28" y="2047.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (4 samples, 0.03%)</title><rect x="644.7" y="2037" width="0.4" height="15.0" fill="rgb(230,142,1)" rx="2" ry="2" />
<text  x="647.74" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="459.8" y="1717" width="0.7" height="15.0" fill="rgb(214,128,37)" rx="2" ry="2" />
<text  x="462.82" y="1727.5" ></text>
</g>
<g >
<title>c10::TensorType::isSubtypeOfExt (3 samples, 0.02%)</title><rect x="642.7" y="2037" width="0.3" height="15.0" fill="rgb(249,199,8)" rx="2" ry="2" />
<text  x="645.73" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1157" width="0.5" height="15.0" fill="rgb(212,121,29)" rx="2" ry="2" />
<text  x="1186.16" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1181.9" y="1941" width="0.1" height="15.0" fill="rgb(231,18,6)" rx="2" ry="2" />
<text  x="1184.87" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="677" width="8.0" height="15.0" fill="rgb(252,65,7)" rx="2" ry="2" />
<text  x="62.09" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1653" width="0.7" height="15.0" fill="rgb(228,213,0)" rx="2" ry="2" />
<text  x="1185.27" y="1663.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (7 samples, 0.05%)</title><rect x="479.3" y="1941" width="0.6" height="15.0" fill="rgb(215,219,49)" rx="2" ry="2" />
<text  x="482.30" y="1951.5" ></text>
</g>
<g >
<title>at::detail::make_tensor&lt;c10::TensorImpl, c10::intrusive_ptr&lt;c10::StorageImpl, c10::detail::intrusive_target_default_null_type&lt;c10::StorageImpl&gt; &gt;, c10::DispatchKey&gt; (2 samples, 0.01%)</title><rect x="633.7" y="2037" width="0.2" height="15.0" fill="rgb(205,192,45)" rx="2" ry="2" />
<text  x="636.72" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1237" width="8.1" height="15.0" fill="rgb(252,53,0)" rx="2" ry="2" />
<text  x="62.09" y="1247.5" ></text>
</g>
<g >
<title>malloc (3 samples, 0.02%)</title><rect x="443.4" y="1925" width="0.2" height="15.0" fill="rgb(242,157,42)" rx="2" ry="2" />
<text  x="446.41" y="1935.5" ></text>
</g>
<g >
<title>at::native::empty_cpu (2 samples, 0.01%)</title><rect x="636.5" y="1973" width="0.2" height="15.0" fill="rgb(233,19,21)" rx="2" ry="2" />
<text  x="639.53" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="933" width="8.0" height="15.0" fill="rgb(245,63,12)" rx="2" ry="2" />
<text  x="62.09" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="446.1" y="1733" width="0.1" height="15.0" fill="rgb(243,194,9)" rx="2" ry="2" />
<text  x="449.06" y="1743.5" ></text>
</g>
<g >
<title>malloc (95 samples, 0.65%)</title><rect x="1012.6" y="2053" width="7.6" height="15.0" fill="rgb(251,47,46)" rx="2" ry="2" />
<text  x="1015.57" y="2063.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (18 samples, 0.12%)</title><rect x="65.6" y="101" width="1.5" height="15.0" fill="rgb(239,5,30)" rx="2" ry="2" />
<text  x="68.60" y="111.5" ></text>
</g>
<g >
<title>at::TensorIterator::reorder_dimensions (2 samples, 0.01%)</title><rect x="633.3" y="2037" width="0.2" height="15.0" fill="rgb(233,210,22)" rx="2" ry="2" />
<text  x="636.31" y="2047.5" ></text>
</g>
<g >
<title>cfree (15 samples, 0.10%)</title><rect x="73.9" y="2021" width="1.2" height="15.0" fill="rgb(244,185,1)" rx="2" ry="2" />
<text  x="76.89" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1525" width="0.7" height="15.0" fill="rgb(236,176,49)" rx="2" ry="2" />
<text  x="1185.27" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="445.9" y="1765" width="0.3" height="15.0" fill="rgb(247,199,26)" rx="2" ry="2" />
<text  x="448.90" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="446.1" y="1653" width="0.1" height="15.0" fill="rgb(213,44,36)" rx="2" ry="2" />
<text  x="449.06" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="869" width="0.6" height="15.0" fill="rgb(238,222,52)" rx="2" ry="2" />
<text  x="1185.36" y="879.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::_M_realloc_insert&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (2 samples, 0.01%)</title><rect x="451.9" y="1989" width="0.2" height="15.0" fill="rgb(231,115,50)" rx="2" ry="2" />
<text  x="454.94" y="1999.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="480.7" y="1941" width="0.3" height="15.0" fill="rgb(254,52,4)" rx="2" ry="2" />
<text  x="483.74" y="1951.5" ></text>
</g>
<g >
<title>at::Tensor::as_strided (4 samples, 0.03%)</title><rect x="59.3" y="37" width="0.3" height="15.0" fill="rgb(215,119,37)" rx="2" ry="2" />
<text  x="62.33" y="47.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="917" width="8.0" height="15.0" fill="rgb(219,111,30)" rx="2" ry="2" />
<text  x="62.09" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="117" width="0.6" height="15.0" fill="rgb(244,10,10)" rx="2" ry="2" />
<text  x="1185.36" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (10 samples, 0.07%)</title><rect x="459.7" y="1749" width="0.8" height="15.0" fill="rgb(211,203,43)" rx="2" ry="2" />
<text  x="462.74" y="1759.5" ></text>
</g>
<g >
<title>at::native::legacy::cpu::s__th_addmm_out (4 samples, 0.03%)</title><rect x="64.2" y="53" width="0.3" height="15.0" fill="rgb(237,153,13)" rx="2" ry="2" />
<text  x="67.16" y="63.5" ></text>
</g>
<g >
<title>cfree (6 samples, 0.04%)</title><rect x="481.4" y="1941" width="0.5" height="15.0" fill="rgb(214,28,11)" rx="2" ry="2" />
<text  x="484.39" y="1951.5" ></text>
</g>
<g >
<title>at::native::legacy::cpu::_th_addmm_out (6 samples, 0.04%)</title><rect x="63.4" y="53" width="0.5" height="15.0" fill="rgb(206,134,2)" rx="2" ry="2" />
<text  x="66.43" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1183.1" y="1733" width="0.6" height="15.0" fill="rgb(225,73,33)" rx="2" ry="2" />
<text  x="1186.08" y="1743.5" ></text>
</g>
<g >
<title>TAnnotator::PreprocessText (86 samples, 0.59%)</title><rect x="460.6" y="1957" width="6.9" height="15.0" fill="rgb(212,62,12)" rx="2" ry="2" />
<text  x="463.63" y="1967.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (36 samples, 0.25%)</title><rect x="728.9" y="2037" width="2.9" height="15.0" fill="rgb(252,80,49)" rx="2" ry="2" />
<text  x="731.91" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (2 samples, 0.01%)</title><rect x="453.9" y="1797" width="0.2" height="15.0" fill="rgb(235,33,15)" rx="2" ry="2" />
<text  x="456.95" y="1807.5" ></text>
</g>
<g >
<title>torch::jit::GraphExecutorImplBase::run (67 samples, 0.46%)</title><rect x="1148.9" y="1989" width="5.4" height="15.0" fill="rgb(243,169,24)" rx="2" ry="2" />
<text  x="1151.88" y="1999.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.01%)</title><rect x="79.6" y="2021" width="0.2" height="15.0" fill="rgb(241,189,35)" rx="2" ry="2" />
<text  x="82.61" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="460.4" y="1093" width="0.1" height="15.0" fill="rgb(207,57,8)" rx="2" ry="2" />
<text  x="463.39" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="446.1" y="1685" width="0.1" height="15.0" fill="rgb(241,33,53)" rx="2" ry="2" />
<text  x="449.06" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="709" width="8.0" height="15.0" fill="rgb(214,115,54)" rx="2" ry="2" />
<text  x="62.09" y="719.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="1146.1" y="2037" width="0.3" height="15.0" fill="rgb(243,177,51)" rx="2" ry="2" />
<text  x="1149.14" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1845" width="0.7" height="15.0" fill="rgb(208,26,46)" rx="2" ry="2" />
<text  x="1185.27" y="1855.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (27 samples, 0.18%)</title><rect x="56.8" y="1941" width="2.1" height="15.0" fill="rgb(236,226,33)" rx="2" ry="2" />
<text  x="59.75" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="460.2" y="1221" width="0.3" height="15.0" fill="rgb(240,195,43)" rx="2" ry="2" />
<text  x="463.23" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="460.3" y="1109" width="0.2" height="15.0" fill="rgb(235,132,44)" rx="2" ry="2" />
<text  x="463.31" y="1119.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="277" width="8.0" height="15.0" fill="rgb(208,82,54)" rx="2" ry="2" />
<text  x="62.09" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.5" y="1253" width="0.2" height="15.0" fill="rgb(246,204,47)" rx="2" ry="2" />
<text  x="462.50" y="1263.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="174.9" y="1973" width="0.2" height="15.0" fill="rgb(223,215,27)" rx="2" ry="2" />
<text  x="177.88" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="181" width="8.0" height="15.0" fill="rgb(254,72,31)" rx="2" ry="2" />
<text  x="62.09" y="191.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (15 samples, 0.10%)</title><rect x="69.9" y="2005" width="1.2" height="15.0" fill="rgb(234,172,17)" rx="2" ry="2" />
<text  x="72.87" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="901" width="0.5" height="15.0" fill="rgb(243,73,4)" rx="2" ry="2" />
<text  x="1186.16" y="911.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (15 samples, 0.10%)</title><rect x="76.6" y="2021" width="1.2" height="15.0" fill="rgb(223,126,21)" rx="2" ry="2" />
<text  x="79.63" y="2031.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (114 samples, 0.78%)</title><rect x="765.1" y="2053" width="9.2" height="15.0" fill="rgb(253,4,43)" rx="2" ry="2" />
<text  x="768.12" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="1269" width="0.6" height="15.0" fill="rgb(235,192,39)" rx="2" ry="2" />
<text  x="1185.36" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="446.1" y="1701" width="0.1" height="15.0" fill="rgb(234,100,31)" rx="2" ry="2" />
<text  x="449.06" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="405" width="8.0" height="15.0" fill="rgb(210,164,8)" rx="2" ry="2" />
<text  x="62.09" y="415.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1413" width="8.1" height="15.0" fill="rgb(228,132,14)" rx="2" ry="2" />
<text  x="62.09" y="1423.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="981" width="8.0" height="15.0" fill="rgb(237,145,50)" rx="2" ry="2" />
<text  x="62.09" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1125" width="0.5" height="15.0" fill="rgb(240,219,30)" rx="2" ry="2" />
<text  x="1186.16" y="1135.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="293" width="8.0" height="15.0" fill="rgb(229,5,11)" rx="2" ry="2" />
<text  x="62.09" y="303.5" ></text>
</g>
<g >
<title>torch::autograd::make_variable_differentiable_view (2 samples, 0.01%)</title><rect x="639.3" y="1989" width="0.2" height="15.0" fill="rgb(220,45,32)" rx="2" ry="2" />
<text  x="642.35" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="869" width="8.0" height="15.0" fill="rgb(210,62,16)" rx="2" ry="2" />
<text  x="62.09" y="879.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const&amp;&gt; (3 samples, 0.02%)</title><rect x="453.9" y="1941" width="0.2" height="15.0" fill="rgb(227,18,42)" rx="2" ry="2" />
<text  x="456.87" y="1951.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (14 samples, 0.10%)</title><rect x="187.3" y="1909" width="1.1" height="15.0" fill="rgb(215,86,33)" rx="2" ry="2" />
<text  x="190.27" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (132 samples, 0.90%)</title><rect x="56.8" y="1957" width="10.6" height="15.0" fill="rgb(209,151,25)" rx="2" ry="2" />
<text  x="59.75" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (145 samples, 0.99%)</title><rect x="55.7" y="1973" width="11.7" height="15.0" fill="rgb(220,103,37)" rx="2" ry="2" />
<text  x="58.71" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="445.9" y="1605" width="0.2" height="15.0" fill="rgb(246,220,51)" rx="2" ry="2" />
<text  x="448.90" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="661" width="8.0" height="15.0" fill="rgb(229,64,4)" rx="2" ry="2" />
<text  x="62.09" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="245" width="0.6" height="15.0" fill="rgb(232,167,19)" rx="2" ry="2" />
<text  x="1185.36" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="459.3" y="1445" width="0.4" height="15.0" fill="rgb(221,96,0)" rx="2" ry="2" />
<text  x="462.26" y="1455.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (143 samples, 0.98%)</title><rect x="1050.3" y="2037" width="11.5" height="15.0" fill="rgb(237,118,48)" rx="2" ry="2" />
<text  x="1053.31" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="446.1" y="1605" width="0.1" height="15.0" fill="rgb(218,112,42)" rx="2" ry="2" />
<text  x="449.06" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1733" width="0.7" height="15.0" fill="rgb(230,58,20)" rx="2" ry="2" />
<text  x="1185.27" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (2 samples, 0.01%)</title><rect x="733.2" y="2037" width="0.1" height="15.0" fill="rgb(209,90,7)" rx="2" ry="2" />
<text  x="736.18" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1989" width="0.7" height="15.0" fill="rgb(240,37,33)" rx="2" ry="2" />
<text  x="1185.27" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1813" width="8.2" height="15.0" fill="rgb(227,46,38)" rx="2" ry="2" />
<text  x="62.01" y="1823.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (5 samples, 0.03%)</title><rect x="129.3" y="2021" width="0.4" height="15.0" fill="rgb(220,80,8)" rx="2" ry="2" />
<text  x="132.34" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1701" width="8.2" height="15.0" fill="rgb(205,195,15)" rx="2" ry="2" />
<text  x="62.01" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="445.9" y="1813" width="0.3" height="15.0" fill="rgb(226,64,8)" rx="2" ry="2" />
<text  x="448.90" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1301" width="8.1" height="15.0" fill="rgb(236,168,4)" rx="2" ry="2" />
<text  x="62.09" y="1311.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt; const&amp;&gt; (3 samples, 0.02%)</title><rect x="453.9" y="1861" width="0.2" height="15.0" fill="rgb(216,138,44)" rx="2" ry="2" />
<text  x="456.87" y="1871.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (695 samples, 4.74%)</title><rect x="1080.1" y="2053" width="55.9" height="15.0" fill="rgb(214,25,45)" rx="2" ry="2" />
<text  x="1083.08" y="2063.5" >onmt:..</text>
</g>
<g >
<title>torch::autograd::impl::gradient_edge (9 samples, 0.06%)</title><rect x="736.7" y="2037" width="0.7" height="15.0" fill="rgb(218,4,43)" rx="2" ry="2" />
<text  x="739.72" y="2047.5" ></text>
</g>
<g >
<title>c10::TensorImpl::sizes (2 samples, 0.01%)</title><rect x="750.9" y="2053" width="0.1" height="15.0" fill="rgb(210,150,10)" rx="2" ry="2" />
<text  x="753.88" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1183.0" y="1973" width="0.7" height="15.0" fill="rgb(217,48,37)" rx="2" ry="2" />
<text  x="1186.00" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="933" width="0.6" height="15.0" fill="rgb(249,52,38)" rx="2" ry="2" />
<text  x="1185.36" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="853" width="0.6" height="15.0" fill="rgb(228,36,44)" rx="2" ry="2" />
<text  x="1185.36" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="517" width="0.5" height="15.0" fill="rgb(235,26,42)" rx="2" ry="2" />
<text  x="1186.16" y="527.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::(anonymous namespace)::copy_ (10 samples, 0.07%)</title><rect x="474.1" y="1909" width="0.9" height="15.0" fill="rgb(209,174,1)" rx="2" ry="2" />
<text  x="477.15" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1109" width="0.5" height="15.0" fill="rgb(229,167,42)" rx="2" ry="2" />
<text  x="1186.16" y="1119.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1589" width="8.2" height="15.0" fill="rgb(206,187,7)" rx="2" ry="2" />
<text  x="62.01" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1669" width="8.2" height="15.0" fill="rgb(237,172,31)" rx="2" ry="2" />
<text  x="62.01" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="445.9" y="1925" width="0.3" height="15.0" fill="rgb(252,201,6)" rx="2" ry="2" />
<text  x="448.90" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1285" width="8.1" height="15.0" fill="rgb(205,104,22)" rx="2" ry="2" />
<text  x="62.09" y="1295.5" ></text>
</g>
<g >
<title>at::TensorIterator::output (2 samples, 0.01%)</title><rect x="1152.0" y="1813" width="0.2" height="15.0" fill="rgb(216,103,49)" rx="2" ry="2" />
<text  x="1155.02" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (22 samples, 0.15%)</title><rect x="458.8" y="1941" width="1.7" height="15.0" fill="rgb(208,207,4)" rx="2" ry="2" />
<text  x="461.78" y="1951.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::add (5 samples, 0.03%)</title><rect x="175.7" y="1941" width="0.4" height="15.0" fill="rgb(250,113,22)" rx="2" ry="2" />
<text  x="178.69" y="1951.5" ></text>
</g>
<g >
<title>std::_Sp_counted_deleter&lt;torch::autograd::generated::AddBackward0*, void  (4 samples, 0.03%)</title><rect x="724.0" y="2037" width="0.3" height="15.0" fill="rgb(245,132,13)" rx="2" ry="2" />
<text  x="727.00" y="2047.5" ></text>
</g>
<g >
<title>onmt::unicode::is_number (15 samples, 0.10%)</title><rect x="1136.0" y="2053" width="1.2" height="15.0" fill="rgb(247,108,25)" rx="2" ry="2" />
<text  x="1139.01" y="2063.5" ></text>
</g>
<g >
<title>torch::jit::(anonymous namespace)::{lambda (5 samples, 0.03%)</title><rect x="1149.4" y="1957" width="0.4" height="15.0" fill="rgb(205,16,32)" rx="2" ry="2" />
<text  x="1152.36" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (90 samples, 0.61%)</title><rect x="1147.2" y="2021" width="7.2" height="15.0" fill="rgb(247,124,46)" rx="2" ry="2" />
<text  x="1150.19" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="949" width="0.6" height="15.0" fill="rgb(231,159,39)" rx="2" ry="2" />
<text  x="1185.36" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="997" width="0.5" height="15.0" fill="rgb(243,163,33)" rx="2" ry="2" />
<text  x="1186.16" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="460.1" y="1557" width="0.4" height="15.0" fill="rgb(221,217,31)" rx="2" ry="2" />
<text  x="463.06" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="757" width="0.5" height="15.0" fill="rgb(235,128,32)" rx="2" ry="2" />
<text  x="1186.16" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1301" width="0.5" height="15.0" fill="rgb(230,108,44)" rx="2" ry="2" />
<text  x="1186.16" y="1311.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const&amp;&gt; (2 samples, 0.01%)</title><rect x="453.9" y="1813" width="0.2" height="15.0" fill="rgb(211,42,0)" rx="2" ry="2" />
<text  x="456.95" y="1823.5" ></text>
</g>
<g >
<title>[libc10.so] (2 samples, 0.01%)</title><rect x="55.1" y="2005" width="0.2" height="15.0" fill="rgb(223,145,26)" rx="2" ry="2" />
<text  x="58.14" y="2015.5" ></text>
</g>
<g >
<title>c10::OperatorHandle::callUnboxed&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;&gt; (3 samples, 0.02%)</title><rect x="478.7" y="1893" width="0.2" height="15.0" fill="rgb(251,189,12)" rx="2" ry="2" />
<text  x="481.65" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1221" width="0.5" height="15.0" fill="rgb(237,46,10)" rx="2" ry="2" />
<text  x="1186.16" y="1231.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_insert_unique&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (21 samples, 0.14%)</title><rect x="440.3" y="1941" width="1.7" height="15.0" fill="rgb(243,120,53)" rx="2" ry="2" />
<text  x="443.27" y="1951.5" ></text>
</g>
<g >
<title>at::native::(anonymous namespace)::add_kernel (3 samples, 0.02%)</title><rect x="1151.2" y="1861" width="0.3" height="15.0" fill="rgb(205,217,14)" rx="2" ry="2" />
<text  x="1154.21" y="1871.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;torch::autograd::AccumulateGrad, std::allocator&lt;torch::autograd::AccumulateGrad&gt;,  (2 samples, 0.01%)</title><rect x="724.4" y="2037" width="0.2" height="15.0" fill="rgb(251,131,17)" rx="2" ry="2" />
<text  x="727.41" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="373" width="8.0" height="15.0" fill="rgb(248,77,45)" rx="2" ry="2" />
<text  x="62.09" y="383.5" ></text>
</g>
<g >
<title>std::istream::get (6 samples, 0.04%)</title><rect x="1185.8" y="2053" width="0.5" height="15.0" fill="rgb(237,101,49)" rx="2" ry="2" />
<text  x="1188.82" y="2063.5" ></text>
</g>
<g >
<title>at::TensorIterator::nullary_op (11 samples, 0.08%)</title><rect x="64.5" y="53" width="0.9" height="15.0" fill="rgb(231,41,15)" rx="2" ry="2" />
<text  x="67.48" y="63.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.01%)</title><rect x="426.3" y="1957" width="0.2" height="15.0" fill="rgb(254,129,40)" rx="2" ry="2" />
<text  x="429.35" y="1967.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (10 samples, 0.07%)</title><rect x="472.9" y="1909" width="0.8" height="15.0" fill="rgb(226,202,6)" rx="2" ry="2" />
<text  x="475.94" y="1919.5" ></text>
</g>
<g >
<title>at::TensorIterator::build (12 samples, 0.08%)</title><rect x="65.6" y="53" width="1.0" height="15.0" fill="rgb(207,141,14)" rx="2" ry="2" />
<text  x="68.60" y="63.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (30 samples, 0.20%)</title><rect x="423.8" y="1925" width="2.4" height="15.0" fill="rgb(237,84,3)" rx="2" ry="2" />
<text  x="426.77" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="501" width="0.5" height="15.0" fill="rgb(236,214,17)" rx="2" ry="2" />
<text  x="1186.16" y="511.5" ></text>
</g>
<g >
<title>c10::TensorOptions::computeDispatchKey (5 samples, 0.03%)</title><rect x="752.1" y="2005" width="0.4" height="15.0" fill="rgb(244,90,12)" rx="2" ry="2" />
<text  x="755.09" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="445.9" y="1749" width="0.2" height="15.0" fill="rgb(208,85,16)" rx="2" ry="2" />
<text  x="448.90" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="1029" width="8.0" height="15.0" fill="rgb(225,57,45)" rx="2" ry="2" />
<text  x="62.09" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="885" width="0.5" height="15.0" fill="rgb(217,187,4)" rx="2" ry="2" />
<text  x="1186.16" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1637" width="0.7" height="15.0" fill="rgb(244,221,30)" rx="2" ry="2" />
<text  x="1185.27" y="1647.5" ></text>
</g>
<g >
<title>at::(anonymous namespace)::zeros (8 samples, 0.05%)</title><rect x="751.8" y="2021" width="0.7" height="15.0" fill="rgb(222,193,10)" rx="2" ry="2" />
<text  x="754.85" y="2031.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (11 samples, 0.08%)</title><rect x="462.4" y="1925" width="0.9" height="15.0" fill="rgb(208,68,52)" rx="2" ry="2" />
<text  x="465.40" y="1935.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::type_to_char (2 samples, 0.01%)</title><rect x="1024.4" y="2053" width="0.2" height="15.0" fill="rgb(224,60,25)" rx="2" ry="2" />
<text  x="1027.39" y="2063.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (39 samples, 0.27%)</title><rect x="43.9" y="2053" width="3.1" height="15.0" fill="rgb(210,147,49)" rx="2" ry="2" />
<text  x="46.88" y="2063.5" ></text>
</g>
<g >
<title>__tls_get_addr (2 samples, 0.01%)</title><rect x="639.6" y="2005" width="0.2" height="15.0" fill="rgb(206,177,25)" rx="2" ry="2" />
<text  x="642.59" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1893" width="8.2" height="15.0" fill="rgb(248,37,8)" rx="2" ry="2" />
<text  x="62.01" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="459.8" y="1733" width="0.7" height="15.0" fill="rgb(244,190,9)" rx="2" ry="2" />
<text  x="462.82" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.2" y="373" width="0.5" height="15.0" fill="rgb(217,152,3)" rx="2" ry="2" />
<text  x="1186.24" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1183.1" y="1829" width="0.6" height="15.0" fill="rgb(253,122,42)" rx="2" ry="2" />
<text  x="1186.08" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.2" y="213" width="0.5" height="15.0" fill="rgb(243,194,23)" rx="2" ry="2" />
<text  x="1186.24" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1189" width="0.5" height="15.0" fill="rgb(208,191,37)" rx="2" ry="2" />
<text  x="1186.16" y="1199.5" ></text>
</g>
<g >
<title>TNewsCluster::TNewsCluster (3 samples, 0.02%)</title><rect x="428.0" y="2005" width="0.3" height="15.0" fill="rgb(247,65,45)" rx="2" ry="2" />
<text  x="431.04" y="2015.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (104 samples, 0.71%)</title><rect x="79.9" y="2021" width="8.4" height="15.0" fill="rgb(243,158,6)" rx="2" ry="2" />
<text  x="82.93" y="2031.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate@plt (2 samples, 0.01%)</title><rect x="1164.4" y="2053" width="0.2" height="15.0" fill="rgb(218,196,53)" rx="2" ry="2" />
<text  x="1167.41" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="357" width="0.6" height="15.0" fill="rgb(231,63,5)" rx="2" ry="2" />
<text  x="1185.36" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::_M_realloc_insert&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const&amp;&gt; (3 samples, 0.02%)</title><rect x="453.9" y="2005" width="0.2" height="15.0" fill="rgb(250,111,37)" rx="2" ry="2" />
<text  x="456.87" y="2015.5" ></text>
</g>
<g >
<title>__kmp_invoke_microtask (520 samples, 3.55%)</title><rect x="131.7" y="2021" width="41.9" height="15.0" fill="rgb(217,229,41)" rx="2" ry="2" />
<text  x="134.75" y="2031.5" >__k..</text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="789" width="8.0" height="15.0" fill="rgb(229,17,41)" rx="2" ry="2" />
<text  x="62.09" y="799.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (35 samples, 0.24%)</title><rect x="674.9" y="2037" width="2.8" height="15.0" fill="rgb(254,40,18)" rx="2" ry="2" />
<text  x="677.92" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::detail::dtoa_impl::grisu2_digit_gen (5 samples, 0.03%)</title><rect x="1022.1" y="2053" width="0.4" height="15.0" fill="rgb(236,123,21)" rx="2" ry="2" />
<text  x="1025.14" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="389" width="8.0" height="15.0" fill="rgb(210,24,13)" rx="2" ry="2" />
<text  x="62.09" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::push_back (3 samples, 0.02%)</title><rect x="444.2" y="1941" width="0.3" height="15.0" fill="rgb(236,58,49)" rx="2" ry="2" />
<text  x="447.21" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1557" width="0.7" height="15.0" fill="rgb(229,85,0)" rx="2" ry="2" />
<text  x="1185.27" y="1567.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="805" width="8.0" height="15.0" fill="rgb(232,182,45)" rx="2" ry="2" />
<text  x="62.09" y="815.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="1162.9" y="2037" width="0.1" height="15.0" fill="rgb(214,58,17)" rx="2" ry="2" />
<text  x="1165.88" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1829" width="8.2" height="15.0" fill="rgb(217,178,39)" rx="2" ry="2" />
<text  x="62.01" y="1839.5" ></text>
</g>
<g >
<title>std::__merge_sort_with_buffer&lt;__gnu_cxx::__normal_iterator&lt;TDbDocument*, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, TDbDocument*, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (11 samples, 0.08%)</title><rect x="426.9" y="1973" width="0.9" height="15.0" fill="rgb(254,156,16)" rx="2" ry="2" />
<text  x="429.91" y="1983.5" ></text>
</g>
<g >
<title>torch::autograd::generated::TBackward::~TBackward (2 samples, 0.01%)</title><rect x="736.6" y="2037" width="0.1" height="15.0" fill="rgb(206,160,23)" rx="2" ry="2" />
<text  x="739.56" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="405" width="0.6" height="15.0" fill="rgb(245,5,50)" rx="2" ry="2" />
<text  x="1185.36" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1813" width="0.7" height="15.0" fill="rgb(244,118,16)" rx="2" ry="2" />
<text  x="1185.27" y="1823.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="65.6" y="37" width="0.2" height="15.0" fill="rgb(242,122,50)" rx="2" ry="2" />
<text  x="68.60" y="47.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="634.1" y="2005" width="0.2" height="15.0" fill="rgb(225,121,20)" rx="2" ry="2" />
<text  x="637.12" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="533" width="0.5" height="15.0" fill="rgb(218,104,13)" rx="2" ry="2" />
<text  x="1186.16" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="725" width="0.6" height="15.0" fill="rgb(221,158,50)" rx="2" ry="2" />
<text  x="1185.36" y="735.5" ></text>
</g>
<g >
<title>c10::TensorImpl::stride (2 samples, 0.01%)</title><rect x="642.1" y="2005" width="0.1" height="15.0" fill="rgb(215,93,31)" rx="2" ry="2" />
<text  x="645.09" y="2015.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (51 samples, 0.35%)</title><rect x="91.2" y="2021" width="4.1" height="15.0" fill="rgb(232,141,26)" rx="2" ry="2" />
<text  x="94.19" y="2031.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (5 samples, 0.03%)</title><rect x="732.0" y="2037" width="0.5" height="15.0" fill="rgb(247,212,11)" rx="2" ry="2" />
<text  x="735.05" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="709" width="0.6" height="15.0" fill="rgb(250,10,49)" rx="2" ry="2" />
<text  x="1185.36" y="719.5" ></text>
</g>
<g >
<title>c10::ClassType::isSubtypeOfExt (2 samples, 0.01%)</title><rect x="1147.8" y="1973" width="0.1" height="15.0" fill="rgb(212,97,2)" rx="2" ry="2" />
<text  x="1150.75" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.2" y="485" width="0.5" height="15.0" fill="rgb(213,75,44)" rx="2" ry="2" />
<text  x="1186.24" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="165" width="0.6" height="15.0" fill="rgb(251,215,49)" rx="2" ry="2" />
<text  x="1185.36" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="933" width="0.5" height="15.0" fill="rgb(221,7,17)" rx="2" ry="2" />
<text  x="1186.16" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1781" width="0.7" height="15.0" fill="rgb(206,179,43)" rx="2" ry="2" />
<text  x="1185.27" y="1791.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::optional&lt;TDbDocument&gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_state&lt;std::_Bind&lt;std::optional&lt;TDbDocument&gt;  (2,211 samples, 15.08%)</title><rect x="454.5" y="1989" width="177.9" height="15.0" fill="rgb(212,130,14)" rx="2" ry="2" />
<text  x="457.51" y="1999.5" >std::__future_base::_Ta..</text>
</g>
<g >
<title>at::empty (11 samples, 0.08%)</title><rect x="753.1" y="2021" width="0.9" height="15.0" fill="rgb(240,170,3)" rx="2" ry="2" />
<text  x="756.13" y="2031.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_escaped (4 samples, 0.03%)</title><rect x="448.3" y="1893" width="0.3" height="15.0" fill="rgb(244,5,5)" rx="2" ry="2" />
<text  x="451.32" y="1903.5" ></text>
</g>
<g >
<title>torch::jit::InterpreterStateImpl::runImpl (54 samples, 0.37%)</title><rect x="1149.8" y="1957" width="4.3" height="15.0" fill="rgb(254,212,3)" rx="2" ry="2" />
<text  x="1152.77" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="460.1" y="1445" width="0.4" height="15.0" fill="rgb(205,228,18)" rx="2" ry="2" />
<text  x="463.14" y="1455.5" ></text>
</g>
<g >
<title>torch::autograd::generated::NormBackward1::~NormBackward1 (2 samples, 0.01%)</title><rect x="736.3" y="2037" width="0.2" height="15.0" fill="rgb(251,125,4)" rx="2" ry="2" />
<text  x="739.31" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1285" width="0.5" height="15.0" fill="rgb(244,99,21)" rx="2" ry="2" />
<text  x="1186.16" y="1295.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="693" width="8.0" height="15.0" fill="rgb(219,172,8)" rx="2" ry="2" />
<text  x="62.09" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="389" width="0.6" height="15.0" fill="rgb(241,35,1)" rx="2" ry="2" />
<text  x="1185.36" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="460.1" y="1397" width="0.4" height="15.0" fill="rgb(232,50,46)" rx="2" ry="2" />
<text  x="463.14" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1877" width="0.7" height="15.0" fill="rgb(231,123,28)" rx="2" ry="2" />
<text  x="1185.27" y="1887.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I_column_family.cc (10 samples, 0.07%)</title><rect x="738.0" y="2053" width="0.8" height="15.0" fill="rgb(253,68,17)" rx="2" ry="2" />
<text  x="741.00" y="2063.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (2 samples, 0.01%)</title><rect x="729.3" y="2005" width="0.2" height="15.0" fill="rgb(251,12,35)" rx="2" ry="2" />
<text  x="732.31" y="2015.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (2 samples, 0.01%)</title><rect x="647.9" y="2037" width="0.1" height="15.0" fill="rgb(241,73,41)" rx="2" ry="2" />
<text  x="650.88" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1637" width="8.2" height="15.0" fill="rgb(224,123,51)" rx="2" ry="2" />
<text  x="62.01" y="1647.5" ></text>
</g>
<g >
<title>malloc@plt (2 samples, 0.01%)</title><rect x="1020.2" y="2053" width="0.2" height="15.0" fill="rgb(233,43,2)" rx="2" ry="2" />
<text  x="1023.21" y="2063.5" ></text>
</g>
<g >
<title>c10::FunctionSchema::checkArg (6 samples, 0.04%)</title><rect x="1147.9" y="1973" width="0.5" height="15.0" fill="rgb(215,53,14)" rx="2" ry="2" />
<text  x="1150.91" y="1983.5" ></text>
</g>
<g >
<title>__pthread_once_slow (2,214 samples, 15.10%)</title><rect x="454.3" y="2037" width="178.1" height="15.0" fill="rgb(246,198,34)" rx="2" ry="2" />
<text  x="457.27" y="2047.5" >__pthread_once_slow</text>
</g>
<g >
<title>at::native::DispatchStub&lt;void  (6 samples, 0.04%)</title><rect x="66.6" y="53" width="0.5" height="15.0" fill="rgb(238,30,47)" rx="2" ry="2" />
<text  x="69.57" y="63.5" ></text>
</g>
<g >
<title>syscall (2 samples, 0.01%)</title><rect x="47.7" y="2021" width="0.2" height="15.0" fill="rgb(233,93,43)" rx="2" ry="2" />
<text  x="50.74" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1181.9" y="1957" width="0.1" height="15.0" fill="rgb(246,86,14)" rx="2" ry="2" />
<text  x="1184.87" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1765" width="8.2" height="15.0" fill="rgb(246,159,43)" rx="2" ry="2" />
<text  x="62.01" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="460.1" y="1365" width="0.4" height="15.0" fill="rgb(225,192,18)" rx="2" ry="2" />
<text  x="463.14" y="1375.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1557" width="8.1" height="15.0" fill="rgb(220,0,41)" rx="2" ry="2" />
<text  x="62.09" y="1567.5" ></text>
</g>
<g >
<title>at::native::resize_ (2 samples, 0.01%)</title><rect x="64.0" y="53" width="0.2" height="15.0" fill="rgb(219,212,36)" rx="2" ry="2" />
<text  x="66.99" y="63.5" ></text>
</g>
<g >
<title>THTensor_resizeNd (2 samples, 0.01%)</title><rect x="476.3" y="1765" width="0.2" height="15.0" fill="rgb(230,165,23)" rx="2" ry="2" />
<text  x="479.32" y="1775.5" ></text>
</g>
<g >
<title>torch::autograd::DifferentiableViewMeta::requires_grad (3 samples, 0.02%)</title><rect x="474.6" y="1893" width="0.3" height="15.0" fill="rgb(248,14,23)" rx="2" ry="2" />
<text  x="477.63" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1183.1" y="1669" width="0.6" height="15.0" fill="rgb(228,27,23)" rx="2" ry="2" />
<text  x="1186.08" y="1679.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (11 samples, 0.08%)</title><rect x="729.5" y="2005" width="0.9" height="15.0" fill="rgb(248,202,27)" rx="2" ry="2" />
<text  x="732.47" y="2015.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (18 samples, 0.12%)</title><rect x="730.4" y="2005" width="1.4" height="15.0" fill="rgb(249,221,33)" rx="2" ry="2" />
<text  x="733.36" y="2015.5" ></text>
</g>
<g >
<title>__pthread_once (3 samples, 0.02%)</title><rect x="732.1" y="2005" width="0.3" height="15.0" fill="rgb(231,46,17)" rx="2" ry="2" />
<text  x="735.13" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1183.1" y="1781" width="0.6" height="15.0" fill="rgb(251,43,0)" rx="2" ry="2" />
<text  x="1186.08" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.2" y="245" width="0.5" height="15.0" fill="rgb(220,131,6)" rx="2" ry="2" />
<text  x="1186.24" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find@plt (3 samples, 0.02%)</title><rect x="725.6" y="2037" width="0.3" height="15.0" fill="rgb(245,140,24)" rx="2" ry="2" />
<text  x="728.61" y="2047.5" ></text>
</g>
<g >
<title>__kmp_yield (2 samples, 0.01%)</title><rect x="745.2" y="2053" width="0.2" height="15.0" fill="rgb(251,1,49)" rx="2" ry="2" />
<text  x="748.25" y="2063.5" ></text>
</g>
<g >
<title>at::TensorIterator::build (4 samples, 0.03%)</title><rect x="748.2" y="2021" width="0.3" height="15.0" fill="rgb(252,79,18)" rx="2" ry="2" />
<text  x="751.22" y="2031.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (33 samples, 0.23%)</title><rect x="447.2" y="1957" width="2.6" height="15.0" fill="rgb(237,37,7)" rx="2" ry="2" />
<text  x="450.19" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="741" width="0.6" height="15.0" fill="rgb(237,222,17)" rx="2" ry="2" />
<text  x="1185.36" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="460.1" y="1301" width="0.4" height="15.0" fill="rgb(252,216,49)" rx="2" ry="2" />
<text  x="463.14" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1461" width="0.7" height="15.0" fill="rgb(251,112,39)" rx="2" ry="2" />
<text  x="1185.27" y="1471.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (523 samples, 3.57%)</title><rect x="817.2" y="2053" width="42.1" height="15.0" fill="rgb(234,217,10)" rx="2" ry="2" />
<text  x="820.19" y="2063.5" >fas..</text>
</g>
<g >
<title>at::CPUType::set__source_Storage_storage_offset (9 samples, 0.06%)</title><rect x="476.2" y="1797" width="0.7" height="15.0" fill="rgb(212,187,9)" rx="2" ry="2" />
<text  x="479.16" y="1807.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (84 samples, 0.57%)</title><rect x="680.7" y="2037" width="6.8" height="15.0" fill="rgb(252,118,47)" rx="2" ry="2" />
<text  x="683.71" y="2047.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (12 samples, 0.08%)</title><rect x="646.9" y="2037" width="1.0" height="15.0" fill="rgb(237,39,17)" rx="2" ry="2" />
<text  x="649.91" y="2047.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::norm_ScalarOpt_dim (2 samples, 0.01%)</title><rect x="1153.2" y="1925" width="0.2" height="15.0" fill="rgb(218,88,9)" rx="2" ry="2" />
<text  x="1156.23" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="549" width="8.0" height="15.0" fill="rgb(218,171,1)" rx="2" ry="2" />
<text  x="62.09" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1669" width="0.7" height="15.0" fill="rgb(232,15,13)" rx="2" ry="2" />
<text  x="1185.27" y="1679.5" ></text>
</g>
<g >
<title>at::native::mm_cpu (2 samples, 0.01%)</title><rect x="640.1" y="2005" width="0.1" height="15.0" fill="rgb(214,179,0)" rx="2" ry="2" />
<text  x="643.07" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="460.3" y="1173" width="0.2" height="15.0" fill="rgb(222,72,14)" rx="2" ry="2" />
<text  x="463.31" y="1183.5" ></text>
</g>
<g >
<title>torch::autograd::DifferentiableViewMeta::requires_grad (7 samples, 0.05%)</title><rect x="733.8" y="2037" width="0.6" height="15.0" fill="rgb(241,134,3)" rx="2" ry="2" />
<text  x="736.82" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1381" width="8.1" height="15.0" fill="rgb(214,200,48)" rx="2" ry="2" />
<text  x="62.09" y="1391.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="72.3" y="2021" width="0.1" height="15.0" fill="rgb(206,99,4)" rx="2" ry="2" />
<text  x="75.28" y="2031.5" ></text>
</g>
<g >
<title>c10::TensorImpl::is_sparse (2 samples, 0.01%)</title><rect x="748.8" y="2037" width="0.1" height="15.0" fill="rgb(218,198,19)" rx="2" ry="2" />
<text  x="751.79" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="949" width="0.5" height="15.0" fill="rgb(241,81,29)" rx="2" ry="2" />
<text  x="1186.16" y="959.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (26 samples, 0.18%)</title><rect x="442.1" y="1941" width="2.1" height="15.0" fill="rgb(216,168,9)" rx="2" ry="2" />
<text  x="445.12" y="1951.5" ></text>
</g>
<g >
<title>torch::jit::InterpreterState::run (64 samples, 0.44%)</title><rect x="1149.0" y="1973" width="5.2" height="15.0" fill="rgb(221,90,21)" rx="2" ry="2" />
<text  x="1152.04" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (5 samples, 0.03%)</title><rect x="445.8" y="1941" width="0.4" height="15.0" fill="rgb(211,200,52)" rx="2" ry="2" />
<text  x="448.82" y="1951.5" ></text>
</g>
<g >
<title>c10::TensorImpl::requires_grad@plt (2 samples, 0.01%)</title><rect x="473.3" y="1893" width="0.1" height="15.0" fill="rgb(238,143,52)" rx="2" ry="2" />
<text  x="476.26" y="1903.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (7 samples, 0.05%)</title><rect x="629.7" y="1941" width="0.6" height="15.0" fill="rgb(240,108,37)" rx="2" ry="2" />
<text  x="632.69" y="1951.5" ></text>
</g>
<g >
<title>TSlinkClustering::Cluster (2,942 samples, 20.06%)</title><rect x="190.1" y="1989" width="236.7" height="15.0" fill="rgb(235,215,13)" rx="2" ry="2" />
<text  x="193.09" y="1999.5" >TSlinkClustering::Cluster</text>
</g>
<g >
<title>[unknown] (46 samples, 0.31%)</title><rect x="635.9" y="2005" width="3.7" height="15.0" fill="rgb(207,208,39)" rx="2" ry="2" />
<text  x="638.89" y="2015.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::readWord (68 samples, 0.46%)</title><rect x="859.3" y="2053" width="5.4" height="15.0" fill="rgb(210,3,45)" rx="2" ry="2" />
<text  x="862.27" y="2063.5" ></text>
</g>
<g >
<title>THTensor_setStorageNd (3 samples, 0.02%)</title><rect x="634.6" y="2005" width="0.2" height="15.0" fill="rgb(210,114,16)" rx="2" ry="2" />
<text  x="637.60" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="1029" width="0.6" height="15.0" fill="rgb(230,180,2)" rx="2" ry="2" />
<text  x="1185.36" y="1039.5" ></text>
</g>
<g >
<title>TAlexaAgencyRating::ScoreUrl (68 samples, 0.46%)</title><rect x="431.6" y="1941" width="5.4" height="15.0" fill="rgb(235,157,42)" rx="2" ry="2" />
<text  x="434.58" y="1951.5" ></text>
</g>
<g >
<title>std::locale::~locale (4 samples, 0.03%)</title><rect x="456.4" y="1941" width="0.4" height="15.0" fill="rgb(235,28,53)" rx="2" ry="2" />
<text  x="459.44" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1183.0" y="1941" width="0.7" height="15.0" fill="rgb(213,31,52)" rx="2" ry="2" />
<text  x="1186.00" y="1951.5" ></text>
</g>
<g >
<title>c10::Dispatcher::callUnboxed&lt;at::Tensor, at::Tensor const&amp;, long, long, long, long&gt; (12 samples, 0.08%)</title><rect x="472.9" y="1925" width="1.0" height="15.0" fill="rgb(235,216,18)" rx="2" ry="2" />
<text  x="475.94" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1493" width="0.5" height="15.0" fill="rgb(218,196,44)" rx="2" ry="2" />
<text  x="1186.16" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1141" width="0.5" height="15.0" fill="rgb(212,64,27)" rx="2" ry="2" />
<text  x="1186.16" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1182.6" y="53" width="0.4" height="15.0" fill="rgb(217,100,33)" rx="2" ry="2" />
<text  x="1185.60" y="63.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="949" width="8.0" height="15.0" fill="rgb(226,147,47)" rx="2" ry="2" />
<text  x="62.09" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="133" width="0.6" height="15.0" fill="rgb(250,180,3)" rx="2" ry="2" />
<text  x="1185.36" y="143.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (2,212 samples, 15.08%)</title><rect x="454.4" y="2021" width="178.0" height="15.0" fill="rgb(231,199,5)" rx="2" ry="2" />
<text  x="457.43" y="2031.5" >std::__future_base::_St..</text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (2 samples, 0.01%)</title><rect x="447.0" y="2005" width="0.2" height="15.0" fill="rgb(211,48,54)" rx="2" ry="2" />
<text  x="450.03" y="2015.5" ></text>
</g>
<g >
<title>std::future&lt;std::optional&lt;TDbDocument&gt; &gt;::get (8 samples, 0.05%)</title><rect x="188.6" y="1989" width="0.7" height="15.0" fill="rgb(205,40,28)" rx="2" ry="2" />
<text  x="191.64" y="1999.5" ></text>
</g>
<g >
<title>fasttext::Vector::norm (163 samples, 1.11%)</title><rect x="615.1" y="1941" width="13.1" height="15.0" fill="rgb(253,212,33)" rx="2" ry="2" />
<text  x="618.13" y="1951.5" ></text>
</g>
<g >
<title>torch::zeros (16 samples, 0.11%)</title><rect x="478.0" y="1925" width="1.3" height="15.0" fill="rgb(241,54,33)" rx="2" ry="2" />
<text  x="481.01" y="1935.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (8 samples, 0.05%)</title><rect x="764.5" y="2053" width="0.6" height="15.0" fill="rgb(214,165,21)" rx="2" ry="2" />
<text  x="767.48" y="2063.5" ></text>
</g>
<g >
<title>torch::autograd::SavedVariable::SavedVariable (12 samples, 0.08%)</title><rect x="638.0" y="1989" width="0.9" height="15.0" fill="rgb(214,114,48)" rx="2" ry="2" />
<text  x="640.98" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1181.9" y="1989" width="0.2" height="15.0" fill="rgb(249,214,14)" rx="2" ry="2" />
<text  x="1184.87" y="1999.5" ></text>
</g>
<g >
<title>expf32x (3 samples, 0.02%)</title><rect x="763.5" y="2053" width="0.3" height="15.0" fill="rgb(252,152,30)" rx="2" ry="2" />
<text  x="766.51" y="2063.5" ></text>
</g>
<g >
<title>operator delete@plt (3 samples, 0.02%)</title><rect x="723.7" y="2037" width="0.2" height="15.0" fill="rgb(229,121,32)" rx="2" ry="2" />
<text  x="726.68" y="2047.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (3 samples, 0.02%)</title><rect x="630.3" y="1941" width="0.2" height="15.0" fill="rgb(241,174,30)" rx="2" ry="2" />
<text  x="633.26" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (19 samples, 0.13%)</title><rect x="459.0" y="1781" width="1.5" height="15.0" fill="rgb(222,58,34)" rx="2" ry="2" />
<text  x="462.02" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;::emplace_back&lt;at::Tensor&gt; (2 samples, 0.01%)</title><rect x="643.2" y="1989" width="0.2" height="15.0" fill="rgb(247,76,54)" rx="2" ry="2" />
<text  x="646.21" y="1999.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (36 samples, 0.25%)</title><rect x="88.3" y="2021" width="2.9" height="15.0" fill="rgb(231,97,37)" rx="2" ry="2" />
<text  x="91.30" y="2031.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (2 samples, 0.01%)</title><rect x="67.2" y="1941" width="0.2" height="15.0" fill="rgb(241,71,17)" rx="2" ry="2" />
<text  x="70.21" y="1951.5" ></text>
</g>
<g >
<title>strlen@plt (21 samples, 0.14%)</title><rect x="1187.7" y="2053" width="1.7" height="15.0" fill="rgb(242,151,38)" rx="2" ry="2" />
<text  x="1190.75" y="2063.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (386 samples, 2.63%)</title><rect x="785.2" y="2053" width="31.1" height="15.0" fill="rgb(238,98,42)" rx="2" ry="2" />
<text  x="788.24" y="2063.5" >fa..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1182.4" y="53" width="0.2" height="15.0" fill="rgb(254,151,27)" rx="2" ry="2" />
<text  x="1185.44" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="341" width="0.6" height="15.0" fill="rgb(208,139,22)" rx="2" ry="2" />
<text  x="1185.36" y="351.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::load (13 samples, 0.09%)</title><rect x="60.5" y="37" width="1.1" height="15.0" fill="rgb(225,139,43)" rx="2" ry="2" />
<text  x="63.53" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="460.1" y="1429" width="0.4" height="15.0" fill="rgb(239,8,54)" rx="2" ry="2" />
<text  x="463.14" y="1439.5" ></text>
</g>
<g >
<title>onmt::unicode::is_separator (109 samples, 0.74%)</title><rect x="1137.2" y="2053" width="8.8" height="15.0" fill="rgb(217,35,20)" rx="2" ry="2" />
<text  x="1140.21" y="2063.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (24 samples, 0.16%)</title><rect x="435.1" y="1925" width="1.9" height="15.0" fill="rgb(232,221,22)" rx="2" ry="2" />
<text  x="438.12" y="1935.5" ></text>
</g>
<g >
<title>operator delete@plt (2 samples, 0.01%)</title><rect x="126.8" y="2021" width="0.2" height="15.0" fill="rgb(252,114,0)" rx="2" ry="2" />
<text  x="129.84" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1045" width="0.5" height="15.0" fill="rgb(218,19,11)" rx="2" ry="2" />
<text  x="1186.16" y="1055.5" ></text>
</g>
<g >
<title>torch::jit::GraphFunction::check_single_output (2 samples, 0.01%)</title><rect x="1147.4" y="1989" width="0.1" height="15.0" fill="rgb(238,3,2)" rx="2" ry="2" />
<text  x="1150.35" y="1999.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (5 samples, 0.03%)</title><rect x="738.9" y="2053" width="0.4" height="15.0" fill="rgb(228,208,28)" rx="2" ry="2" />
<text  x="741.89" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="460.1" y="1477" width="0.4" height="15.0" fill="rgb(205,106,22)" rx="2" ry="2" />
<text  x="463.14" y="1487.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::(anonymous namespace)::is_leaf (3 samples, 0.02%)</title><rect x="131.1" y="2021" width="0.2" height="15.0" fill="rgb(205,49,46)" rx="2" ry="2" />
<text  x="134.11" y="2031.5" ></text>
</g>
<g >
<title>torch::autograd::generated::AddBackward0::~AddBackward0 (2 samples, 0.01%)</title><rect x="735.5" y="2037" width="0.2" height="15.0" fill="rgb(216,202,12)" rx="2" ry="2" />
<text  x="738.51" y="2047.5" ></text>
</g>
<g >
<title>THFloatTensor_setStorage (4 samples, 0.03%)</title><rect x="476.3" y="1781" width="0.3" height="15.0" fill="rgb(207,209,44)" rx="2" ry="2" />
<text  x="479.32" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="445.9" y="1653" width="0.2" height="15.0" fill="rgb(229,165,3)" rx="2" ry="2" />
<text  x="448.90" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="459.3" y="1717" width="0.4" height="15.0" fill="rgb(235,194,44)" rx="2" ry="2" />
<text  x="462.26" y="1727.5" ></text>
</g>
<g >
<title>TNewsCluster::Summarize (7 samples, 0.05%)</title><rect x="445.8" y="1989" width="0.6" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="448.82" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1909" width="0.7" height="15.0" fill="rgb(232,224,18)" rx="2" ry="2" />
<text  x="1185.27" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (99 samples, 0.68%)</title><rect x="59.1" y="117" width="8.0" height="15.0" fill="rgb(208,172,52)" rx="2" ry="2" />
<text  x="62.09" y="127.5" ></text>
</g>
<g >
<title>TAgencyRating::ScoreUrl (5 samples, 0.03%)</title><rect x="445.8" y="1973" width="0.4" height="15.0" fill="rgb(250,211,45)" rx="2" ry="2" />
<text  x="448.82" y="1983.5" ></text>
</g>
<g >
<title>TSummarizer::Summarize (224 samples, 1.53%)</title><rect x="428.5" y="2005" width="18.0" height="15.0" fill="rgb(224,58,46)" rx="2" ry="2" />
<text  x="431.52" y="2015.5" ></text>
</g>
<g >
<title>c10::FunctionSchema::checkAndNormalizeInputs (12 samples, 0.08%)</title><rect x="1147.6" y="1989" width="1.0" height="15.0" fill="rgb(228,74,50)" rx="2" ry="2" />
<text  x="1150.59" y="1999.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (7 samples, 0.05%)</title><rect x="432.2" y="1925" width="0.6" height="15.0" fill="rgb(233,179,3)" rx="2" ry="2" />
<text  x="435.22" y="1935.5" ></text>
</g>
<g >
<title>onmt::unicode::get_case (63 samples, 0.43%)</title><rect x="1075.0" y="2053" width="5.1" height="15.0" fill="rgb(215,91,49)" rx="2" ry="2" />
<text  x="1078.01" y="2063.5" ></text>
</g>
<g >
<title>boost::algorithm::join&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, char [2]&gt; (66 samples, 0.45%)</title><rect x="461.7" y="1941" width="5.3" height="15.0" fill="rgb(215,124,22)" rx="2" ry="2" />
<text  x="464.67" y="1951.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::div_Tensor (3 samples, 0.02%)</title><rect x="734.6" y="2037" width="0.3" height="15.0" fill="rgb(237,113,30)" rx="2" ry="2" />
<text  x="737.62" y="2047.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (3 samples, 0.02%)</title><rect x="63.9" y="69" width="0.3" height="15.0" fill="rgb(236,22,10)" rx="2" ry="2" />
<text  x="66.91" y="79.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="517" width="8.0" height="15.0" fill="rgb(206,69,29)" rx="2" ry="2" />
<text  x="62.09" y="527.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (13 samples, 0.09%)</title><rect x="64.5" y="85" width="1.0" height="15.0" fill="rgb(237,120,49)" rx="2" ry="2" />
<text  x="67.48" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="445.9" y="1909" width="0.3" height="15.0" fill="rgb(253,218,38)" rx="2" ry="2" />
<text  x="448.90" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="741" width="0.5" height="15.0" fill="rgb(240,97,27)" rx="2" ry="2" />
<text  x="1186.16" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="460.1" y="1621" width="0.4" height="15.0" fill="rgb(205,14,48)" rx="2" ry="2" />
<text  x="463.06" y="1631.5" ></text>
</g>
<g >
<title>[unknown] (8,575 samples, 58.48%)</title><rect x="48.0" y="2053" width="690.0" height="15.0" fill="rgb(210,226,25)" rx="2" ry="2" />
<text  x="50.98" y="2063.5" >[unknown]</text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (32 samples, 0.22%)</title><rect x="648.1" y="2037" width="2.6" height="15.0" fill="rgb(228,159,49)" rx="2" ry="2" />
<text  x="651.12" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1253" width="8.1" height="15.0" fill="rgb(251,118,51)" rx="2" ry="2" />
<text  x="62.09" y="1263.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::vector (2 samples, 0.01%)</title><rect x="453.9" y="1781" width="0.2" height="15.0" fill="rgb(212,20,30)" rx="2" ry="2" />
<text  x="456.95" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1182.8" y="37" width="0.2" height="15.0" fill="rgb(242,175,3)" rx="2" ry="2" />
<text  x="1185.76" y="47.5" ></text>
</g>
<g >
<title>DetectLanguage (21 samples, 0.14%)</title><rect x="457.1" y="1957" width="1.7" height="15.0" fill="rgb(221,193,21)" rx="2" ry="2" />
<text  x="460.09" y="1967.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="630.8" y="1957" width="0.3" height="15.0" fill="rgb(215,177,49)" rx="2" ry="2" />
<text  x="633.82" y="1967.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (150 samples, 1.02%)</title><rect x="1164.6" y="2053" width="12.0" height="15.0" fill="rgb(207,61,3)" rx="2" ry="2" />
<text  x="1167.57" y="2063.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (13 samples, 0.09%)</title><rect x="55.7" y="1957" width="1.1" height="15.0" fill="rgb(205,191,21)" rx="2" ry="2" />
<text  x="58.71" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="445.9" y="1525" width="0.2" height="15.0" fill="rgb(251,65,49)" rx="2" ry="2" />
<text  x="448.90" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="677" width="0.6" height="15.0" fill="rgb(241,104,23)" rx="2" ry="2" />
<text  x="1185.36" y="687.5" ></text>
</g>
<g >
<title>at::native::t (2 samples, 0.01%)</title><rect x="637.3" y="1989" width="0.2" height="15.0" fill="rgb(233,107,24)" rx="2" ry="2" />
<text  x="640.34" y="1999.5" ></text>
</g>
<g >
<title>at::TensorIterator::data_ptr@plt (2 samples, 0.01%)</title><rect x="747.0" y="2053" width="0.2" height="15.0" fill="rgb(208,8,34)" rx="2" ry="2" />
<text  x="750.02" y="2063.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (33 samples, 0.23%)</title><rect x="447.2" y="1989" width="2.6" height="15.0" fill="rgb(213,140,26)" rx="2" ry="2" />
<text  x="450.19" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="453" width="8.0" height="15.0" fill="rgb(247,202,43)" rx="2" ry="2" />
<text  x="62.09" y="463.5" ></text>
</g>
<g >
<title>[unknown] (53 samples, 0.36%)</title><rect x="59.2" y="69" width="4.2" height="15.0" fill="rgb(252,44,29)" rx="2" ry="2" />
<text  x="62.17" y="79.5" ></text>
</g>
<g >
<title>at::native::make_reduction (7 samples, 0.05%)</title><rect x="749.0" y="2037" width="0.6" height="15.0" fill="rgb(221,113,26)" rx="2" ry="2" />
<text  x="752.03" y="2047.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::mm (2 samples, 0.01%)</title><rect x="638.9" y="1989" width="0.2" height="15.0" fill="rgb(236,50,51)" rx="2" ry="2" />
<text  x="641.95" y="1999.5" ></text>
</g>
<g >
<title>nlohmann::operator&gt;&gt; (161 samples, 1.10%)</title><rect x="175.5" y="1989" width="13.0" height="15.0" fill="rgb(235,151,15)" rx="2" ry="2" />
<text  x="178.53" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1925" width="8.2" height="15.0" fill="rgb(224,37,41)" rx="2" ry="2" />
<text  x="62.01" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1413" width="0.7" height="15.0" fill="rgb(234,166,40)" rx="2" ry="2" />
<text  x="1185.27" y="1423.5" ></text>
</g>
<g >
<title>c10::Dispatcher::callUnboxedWithDispatchKey&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Storage, long, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt; &gt; (12 samples, 0.08%)</title><rect x="476.0" y="1845" width="1.0" height="15.0" fill="rgb(233,109,29)" rx="2" ry="2" />
<text  x="479.00" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1183.1" y="1813" width="0.6" height="15.0" fill="rgb(219,12,49)" rx="2" ry="2" />
<text  x="1186.08" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="446.1" y="1429" width="0.1" height="15.0" fill="rgb(221,48,26)" rx="2" ry="2" />
<text  x="449.06" y="1439.5" ></text>
</g>
<g >
<title>nlohmann::detail::dtoa_impl::format_buffer (2 samples, 0.01%)</title><rect x="449.0" y="1893" width="0.2" height="15.0" fill="rgb(220,199,27)" rx="2" ry="2" />
<text  x="452.04" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="997" width="0.6" height="15.0" fill="rgb(230,78,44)" rx="2" ry="2" />
<text  x="1185.36" y="1007.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (4 samples, 0.03%)</title><rect x="457.5" y="1941" width="0.3" height="15.0" fill="rgb(212,169,35)" rx="2" ry="2" />
<text  x="460.49" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1183.1" y="1765" width="0.6" height="15.0" fill="rgb(237,209,32)" rx="2" ry="2" />
<text  x="1186.08" y="1775.5" ></text>
</g>
<g >
<title>mkl_serv_lsame (3 samples, 0.02%)</title><rect x="673.1" y="2037" width="0.3" height="15.0" fill="rgb(211,216,53)" rx="2" ry="2" />
<text  x="676.15" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="634.1" y="2021" width="0.2" height="15.0" fill="rgb(224,125,30)" rx="2" ry="2" />
<text  x="637.12" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="1125" width="0.6" height="15.0" fill="rgb(251,193,49)" rx="2" ry="2" />
<text  x="1185.36" y="1135.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (33 samples, 0.23%)</title><rect x="447.2" y="1973" width="2.6" height="15.0" fill="rgb(220,31,28)" rx="2" ry="2" />
<text  x="450.19" y="1983.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.02%)</title><rect x="445.2" y="1941" width="0.2" height="15.0" fill="rgb(232,184,27)" rx="2" ry="2" />
<text  x="448.18" y="1951.5" ></text>
</g>
<g >
<title>TDbDocument::TDbDocument (3 samples, 0.02%)</title><rect x="189.8" y="1989" width="0.3" height="15.0" fill="rgb(213,205,8)" rx="2" ry="2" />
<text  x="192.85" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="459.3" y="1525" width="0.4" height="15.0" fill="rgb(244,43,0)" rx="2" ry="2" />
<text  x="462.26" y="1535.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_escaped (5 samples, 0.03%)</title><rect x="449.2" y="1925" width="0.4" height="15.0" fill="rgb(218,170,8)" rx="2" ry="2" />
<text  x="452.20" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="885" width="8.0" height="15.0" fill="rgb(206,132,4)" rx="2" ry="2" />
<text  x="62.09" y="895.5" ></text>
</g>
<g >
<title>Eigen::internal::gebp_kernel&lt;float, float, long, Eigen::internal::blas_data_mapper&lt;float, long, 0, 0, 1&gt;, 8, 4, false, false&gt;::operator (520 samples, 3.55%)</title><rect x="131.7" y="1973" width="41.9" height="15.0" fill="rgb(252,41,27)" rx="2" ry="2" />
<text  x="134.75" y="1983.5" >Eig..</text>
</g>
<g >
<title>[unknown] (8 samples, 0.05%)</title><rect x="634.5" y="2021" width="0.7" height="15.0" fill="rgb(225,200,1)" rx="2" ry="2" />
<text  x="637.52" y="2031.5" ></text>
</g>
<g >
<title>c10::Dispatcher::callUnboxed&lt;at::Tensor, at::Tensor const&amp;, at::Tensor const&amp;&gt; (2 samples, 0.01%)</title><rect x="749.8" y="2053" width="0.1" height="15.0" fill="rgb(235,105,32)" rx="2" ry="2" />
<text  x="752.75" y="2063.5" ></text>
</g>
<g >
<title>at::TypeDefault::fill__Scalar (13 samples, 0.09%)</title><rect x="64.5" y="69" width="1.0" height="15.0" fill="rgb(252,157,3)" rx="2" ry="2" />
<text  x="67.48" y="79.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="229" width="8.0" height="15.0" fill="rgb(207,113,52)" rx="2" ry="2" />
<text  x="62.09" y="239.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_float (5 samples, 0.03%)</title><rect x="448.8" y="1909" width="0.4" height="15.0" fill="rgb(241,159,47)" rx="2" ry="2" />
<text  x="451.80" y="1919.5" ></text>
</g>
<g >
<title>torch::jit::tracer::getTracingState (3 samples, 0.02%)</title><rect x="477.8" y="1925" width="0.2" height="15.0" fill="rgb(238,52,37)" rx="2" ry="2" />
<text  x="480.77" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="460.3" y="1125" width="0.2" height="15.0" fill="rgb(213,31,50)" rx="2" ry="2" />
<text  x="463.31" y="1135.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1749" width="8.2" height="15.0" fill="rgb(209,1,5)" rx="2" ry="2" />
<text  x="62.01" y="1759.5" ></text>
</g>
<g >
<title>__kmp_invoke_task_func (520 samples, 3.55%)</title><rect x="131.7" y="2037" width="41.9" height="15.0" fill="rgb(235,151,30)" rx="2" ry="2" />
<text  x="134.75" y="2047.5" >__k..</text>
</g>
<g >
<title>TDocument::TDocument (4 samples, 0.03%)</title><rect x="174.4" y="1989" width="0.3" height="15.0" fill="rgb(241,62,11)" rx="2" ry="2" />
<text  x="177.40" y="1999.5" ></text>
</g>
<g >
<title>TNewsCluster::CalcImportance (196 samples, 1.34%)</title><rect x="428.7" y="1957" width="15.8" height="15.0" fill="rgb(209,145,38)" rx="2" ry="2" />
<text  x="431.68" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="805" width="0.6" height="15.0" fill="rgb(249,222,15)" rx="2" ry="2" />
<text  x="1185.36" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="460.1" y="1509" width="0.4" height="15.0" fill="rgb(215,147,24)" rx="2" ry="2" />
<text  x="463.14" y="1519.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.03%)</title><rect x="1146.0" y="2053" width="0.4" height="15.0" fill="rgb(239,1,42)" rx="2" ry="2" />
<text  x="1148.98" y="2063.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::scan_string (146 samples, 1.00%)</title><rect x="176.7" y="1941" width="11.7" height="15.0" fill="rgb(228,32,10)" rx="2" ry="2" />
<text  x="179.65" y="1951.5" ></text>
</g>
<g >
<title>at::CPUType::empty_memory_format (2 samples, 0.01%)</title><rect x="752.5" y="2021" width="0.2" height="15.0" fill="rgb(235,67,18)" rx="2" ry="2" />
<text  x="755.49" y="2031.5" ></text>
</g>
<g >
<title>at::AutoNonVariableTypeMode::AutoNonVariableTypeMode (4 samples, 0.03%)</title><rect x="750.3" y="2037" width="0.3" height="15.0" fill="rgb(221,83,50)" rx="2" ry="2" />
<text  x="753.32" y="2047.5" ></text>
</g>
<g >
<title>at::TensorIterator::build (2 samples, 0.01%)</title><rect x="636.0" y="1909" width="0.1" height="15.0" fill="rgb(231,190,27)" rx="2" ry="2" />
<text  x="638.97" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="1141" width="0.6" height="15.0" fill="rgb(239,150,21)" rx="2" ry="2" />
<text  x="1185.36" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="446.1" y="1445" width="0.1" height="15.0" fill="rgb(217,106,17)" rx="2" ry="2" />
<text  x="449.06" y="1455.5" ></text>
</g>
<g >
<title>at::TypeDefault::unsqueeze (2 samples, 0.01%)</title><rect x="644.9" y="2021" width="0.2" height="15.0" fill="rgb(215,89,23)" rx="2" ry="2" />
<text  x="647.90" y="2031.5" ></text>
</g>
<g >
<title>GetHost (2 samples, 0.01%)</title><rect x="454.8" y="1973" width="0.1" height="15.0" fill="rgb(244,226,4)" rx="2" ry="2" />
<text  x="457.75" y="1983.5" ></text>
</g>
<g >
<title>memcmp@plt (14 samples, 0.10%)</title><rect x="1020.5" y="2053" width="1.1" height="15.0" fill="rgb(218,73,18)" rx="2" ry="2" />
<text  x="1023.45" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="2021" width="0.7" height="15.0" fill="rgb(212,204,16)" rx="2" ry="2" />
<text  x="1185.27" y="2031.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (5 samples, 0.03%)</title><rect x="628.5" y="1941" width="0.4" height="15.0" fill="rgb(241,178,19)" rx="2" ry="2" />
<text  x="631.49" y="1951.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (5 samples, 0.03%)</title><rect x="452.9" y="1957" width="0.4" height="15.0" fill="rgb(226,144,15)" rx="2" ry="2" />
<text  x="455.90" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="565" width="0.6" height="15.0" fill="rgb(252,17,39)" rx="2" ry="2" />
<text  x="1185.36" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.2" y="453" width="0.5" height="15.0" fill="rgb(249,218,35)" rx="2" ry="2" />
<text  x="1186.24" y="463.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (4 samples, 0.03%)</title><rect x="738.0" y="2037" width="0.3" height="15.0" fill="rgb(236,87,28)" rx="2" ry="2" />
<text  x="741.00" y="2047.5" ></text>
</g>
<g >
<title>at::native::fill_out (6 samples, 0.04%)</title><rect x="66.6" y="69" width="0.5" height="15.0" fill="rgb(246,213,11)" rx="2" ry="2" />
<text  x="69.57" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="460.1" y="1653" width="0.4" height="15.0" fill="rgb(250,98,46)" rx="2" ry="2" />
<text  x="463.06" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="1189" width="0.6" height="15.0" fill="rgb(213,146,43)" rx="2" ry="2" />
<text  x="1185.36" y="1199.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set_case (2 samples, 0.01%)</title><rect x="674.4" y="2037" width="0.2" height="15.0" fill="rgb(208,16,42)" rx="2" ry="2" />
<text  x="677.43" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="485" width="0.6" height="15.0" fill="rgb(248,22,25)" rx="2" ry="2" />
<text  x="1185.36" y="495.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::get_centroids (16 samples, 0.11%)</title><rect x="993.7" y="2053" width="1.3" height="15.0" fill="rgb(244,99,1)" rx="2" ry="2" />
<text  x="996.74" y="2063.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::unsqueeze (4 samples, 0.03%)</title><rect x="472.4" y="1909" width="0.3" height="15.0" fill="rgb(208,220,22)" rx="2" ry="2" />
<text  x="475.38" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.2" y="357" width="0.5" height="15.0" fill="rgb(239,46,11)" rx="2" ry="2" />
<text  x="1186.24" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;::emplace_back&lt;c10::IValue const&amp;&gt; (3 samples, 0.02%)</title><rect x="1149.1" y="1957" width="0.3" height="15.0" fill="rgb(225,99,37)" rx="2" ry="2" />
<text  x="1152.12" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1925" width="0.7" height="15.0" fill="rgb(246,221,13)" rx="2" ry="2" />
<text  x="1185.27" y="1935.5" ></text>
</g>
<g >
<title>torch::jit::GraphFunction::operator (86 samples, 0.59%)</title><rect x="1147.5" y="2005" width="6.9" height="15.0" fill="rgb(234,90,23)" rx="2" ry="2" />
<text  x="1150.51" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="581" width="0.5" height="15.0" fill="rgb(206,158,19)" rx="2" ry="2" />
<text  x="1186.16" y="591.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="634.8" y="2005" width="0.2" height="15.0" fill="rgb(225,47,47)" rx="2" ry="2" />
<text  x="637.84" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="1221" width="8.0" height="15.0" fill="rgb(205,173,26)" rx="2" ry="2" />
<text  x="62.09" y="1231.5" ></text>
</g>
<g >
<title>TDocument::FromJson (4 samples, 0.03%)</title><rect x="174.4" y="1973" width="0.3" height="15.0" fill="rgb(242,125,46)" rx="2" ry="2" />
<text  x="177.40" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="460.1" y="1573" width="0.4" height="15.0" fill="rgb(239,148,42)" rx="2" ry="2" />
<text  x="463.06" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.2" y="309" width="0.5" height="15.0" fill="rgb(247,166,52)" rx="2" ry="2" />
<text  x="1186.24" y="319.5" ></text>
</g>
<g >
<title>torch::jit::Object::find_method (2 samples, 0.01%)</title><rect x="1146.2" y="2021" width="0.2" height="15.0" fill="rgb(246,109,8)" rx="2" ry="2" />
<text  x="1149.22" y="2031.5" ></text>
</g>
<g >
<title>onmt::is_alphabet (63 samples, 0.43%)</title><rect x="1064.2" y="2053" width="5.1" height="15.0" fill="rgb(231,57,39)" rx="2" ry="2" />
<text  x="1067.23" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (34 samples, 0.23%)</title><rect x="751.6" y="2037" width="2.7" height="15.0" fill="rgb(242,80,26)" rx="2" ry="2" />
<text  x="754.60" y="2047.5" ></text>
</g>
<g >
<title>at::TensorIterator::binary_op (16 samples, 0.11%)</title><rect x="67.9" y="2005" width="1.2" height="15.0" fill="rgb(212,168,36)" rx="2" ry="2" />
<text  x="70.86" y="2015.5" ></text>
</g>
<g >
<title>TThreadPool::enqueue&lt;std::optional&lt;TDbDocument&gt;  (5 samples, 0.03%)</title><rect x="174.7" y="1989" width="0.4" height="15.0" fill="rgb(212,33,42)" rx="2" ry="2" />
<text  x="177.72" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="2005" width="0.7" height="15.0" fill="rgb(249,36,44)" rx="2" ry="2" />
<text  x="1185.27" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="965" width="8.0" height="15.0" fill="rgb(209,89,24)" rx="2" ry="2" />
<text  x="62.09" y="975.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (4 samples, 0.03%)</title><rect x="95.3" y="2021" width="0.3" height="15.0" fill="rgb(211,53,53)" rx="2" ry="2" />
<text  x="98.30" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="597" width="8.0" height="15.0" fill="rgb(246,152,30)" rx="2" ry="2" />
<text  x="62.09" y="607.5" ></text>
</g>
<g >
<title>__tls_get_addr (2 samples, 0.01%)</title><rect x="632.4" y="2037" width="0.2" height="15.0" fill="rgb(248,79,38)" rx="2" ry="2" />
<text  x="635.43" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="459.3" y="1733" width="0.4" height="15.0" fill="rgb(234,106,21)" rx="2" ry="2" />
<text  x="462.26" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1413" width="0.5" height="15.0" fill="rgb(213,72,34)" rx="2" ry="2" />
<text  x="1186.16" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.2" y="69" width="0.5" height="15.0" fill="rgb(211,45,2)" rx="2" ry="2" />
<text  x="1186.24" y="79.5" ></text>
</g>
<g >
<title>[unknown] (7 samples, 0.05%)</title><rect x="479.9" y="1925" width="0.5" height="15.0" fill="rgb(224,184,38)" rx="2" ry="2" />
<text  x="482.86" y="1935.5" ></text>
</g>
<g >
<title>c10::TensorImpl::TensorImpl (5 samples, 0.03%)</title><rect x="640.2" y="2005" width="0.4" height="15.0" fill="rgb(231,52,18)" rx="2" ry="2" />
<text  x="643.23" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="181" width="0.6" height="15.0" fill="rgb(227,138,14)" rx="2" ry="2" />
<text  x="1185.36" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="261" width="0.6" height="15.0" fill="rgb(223,165,42)" rx="2" ry="2" />
<text  x="1185.36" y="271.5" ></text>
</g>
<g >
<title>malloc (38 samples, 0.26%)</title><rect x="666.5" y="2037" width="3.1" height="15.0" fill="rgb(221,200,30)" rx="2" ry="2" />
<text  x="669.55" y="2047.5" ></text>
</g>
<g >
<title>TClusterer::Cluster (2,958 samples, 20.17%)</title><rect x="189.8" y="2005" width="238.1" height="15.0" fill="rgb(214,74,49)" rx="2" ry="2" />
<text  x="192.85" y="2015.5" >TClusterer::Cluster</text>
</g>
<g >
<title>main (3,485 samples, 23.77%)</title><rect x="173.8" y="2021" width="280.4" height="15.0" fill="rgb(252,217,37)" rx="2" ry="2" />
<text  x="176.75" y="2031.5" >main</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1237" width="0.5" height="15.0" fill="rgb(240,132,10)" rx="2" ry="2" />
<text  x="1186.16" y="1247.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (10 samples, 0.07%)</title><rect x="476.1" y="1813" width="0.8" height="15.0" fill="rgb(249,49,11)" rx="2" ry="2" />
<text  x="479.08" y="1823.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (3 samples, 0.02%)</title><rect x="130.2" y="2021" width="0.3" height="15.0" fill="rgb(206,165,10)" rx="2" ry="2" />
<text  x="133.22" y="2031.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (2 samples, 0.01%)</title><rect x="176.1" y="1941" width="0.1" height="15.0" fill="rgb(242,64,37)" rx="2" ry="2" />
<text  x="179.09" y="1951.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_escaped (2 samples, 0.01%)</title><rect x="448.6" y="1909" width="0.2" height="15.0" fill="rgb(229,210,0)" rx="2" ry="2" />
<text  x="451.64" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="1045" width="0.6" height="15.0" fill="rgb(248,96,27)" rx="2" ry="2" />
<text  x="1185.36" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1183.1" y="1877" width="0.6" height="15.0" fill="rgb(251,33,29)" rx="2" ry="2" />
<text  x="1186.08" y="1887.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.02%)</title><rect x="439.5" y="1941" width="0.2" height="15.0" fill="rgb(244,50,2)" rx="2" ry="2" />
<text  x="442.46" y="1951.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::readWord (2 samples, 0.01%)</title><rect x="457.8" y="1941" width="0.2" height="15.0" fill="rgb(210,198,46)" rx="2" ry="2" />
<text  x="460.81" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (47 samples, 0.32%)</title><rect x="59.2" y="53" width="3.7" height="15.0" fill="rgb(224,64,33)" rx="2" ry="2" />
<text  x="62.17" y="63.5" ></text>
</g>
<g >
<title>TDbDocument::operator= (2 samples, 0.01%)</title><rect x="427.6" y="1941" width="0.2" height="15.0" fill="rgb(227,7,9)" rx="2" ry="2" />
<text  x="430.64" y="1951.5" ></text>
</g>
<g >
<title>at::native::(anonymous namespace)::dereference_vec_impl&lt;function_traits&lt;at::native::(anonymous namespace)::add_kernel (2 samples, 0.01%)</title><rect x="751.3" y="2037" width="0.1" height="15.0" fill="rgb(211,0,11)" rx="2" ry="2" />
<text  x="754.28" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1317" width="8.1" height="15.0" fill="rgb(248,121,32)" rx="2" ry="2" />
<text  x="62.09" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14 samples, 0.10%)</title><rect x="1181.9" y="2053" width="1.1" height="15.0" fill="rgb(252,125,25)" rx="2" ry="2" />
<text  x="1184.87" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="773" width="8.0" height="15.0" fill="rgb(251,107,25)" rx="2" ry="2" />
<text  x="62.09" y="783.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (5 samples, 0.03%)</title><rect x="443.6" y="1925" width="0.5" height="15.0" fill="rgb(207,101,43)" rx="2" ry="2" />
<text  x="446.65" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1183.0" y="1989" width="0.7" height="15.0" fill="rgb(205,87,18)" rx="2" ry="2" />
<text  x="1186.00" y="1999.5" ></text>
</g>
<g >
<title>all (14,664 samples, 100%)</title><rect x="10.0" y="2085" width="1180.0" height="15.0" fill="rgb(218,194,15)" rx="2" ry="2" />
<text  x="13.00" y="2095.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (9 samples, 0.06%)</title><rect x="438.4" y="1941" width="0.7" height="15.0" fill="rgb(217,3,33)" rx="2" ry="2" />
<text  x="441.42" y="1951.5" ></text>
</g>
<g >
<title>torch::jit::GraphFunction::ensure_defined (2 samples, 0.01%)</title><rect x="1147.4" y="2005" width="0.1" height="15.0" fill="rgb(222,221,3)" rx="2" ry="2" />
<text  x="1150.35" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1445" width="8.1" height="15.0" fill="rgb(235,163,15)" rx="2" ry="2" />
<text  x="62.09" y="1455.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="245" width="8.0" height="15.0" fill="rgb(224,188,0)" rx="2" ry="2" />
<text  x="62.09" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1717" width="0.7" height="15.0" fill="rgb(215,180,16)" rx="2" ry="2" />
<text  x="1185.27" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="460.3" y="1141" width="0.2" height="15.0" fill="rgb(205,80,7)" rx="2" ry="2" />
<text  x="463.31" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1429" width="0.7" height="15.0" fill="rgb(210,88,54)" rx="2" ry="2" />
<text  x="1185.27" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1749" width="0.7" height="15.0" fill="rgb(216,72,20)" rx="2" ry="2" />
<text  x="1185.27" y="1759.5" ></text>
</g>
<g >
<title>c10::TensorOptions::computeDispatchKey (2 samples, 0.01%)</title><rect x="477.4" y="1893" width="0.1" height="15.0" fill="rgb(223,204,38)" rx="2" ry="2" />
<text  x="480.36" y="1903.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7 samples, 0.05%)</title><rect x="430.6" y="1925" width="0.6" height="15.0" fill="rgb(220,187,35)" rx="2" ry="2" />
<text  x="433.61" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1253" width="0.5" height="15.0" fill="rgb(213,228,0)" rx="2" ry="2" />
<text  x="1186.16" y="1263.5" ></text>
</g>
<g >
<title>c10::TensorImpl::compute_non_overlapping_and_dense (2 samples, 0.01%)</title><rect x="635.4" y="2037" width="0.2" height="15.0" fill="rgb(240,3,50)" rx="2" ry="2" />
<text  x="638.41" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="459.3" y="1509" width="0.4" height="15.0" fill="rgb(233,221,3)" rx="2" ry="2" />
<text  x="462.26" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="460.4" y="1077" width="0.1" height="15.0" fill="rgb(219,78,5)" rx="2" ry="2" />
<text  x="463.39" y="1087.5" ></text>
</g>
<g >
<title>c10::Dispatcher::callUnboxed&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (3 samples, 0.02%)</title><rect x="477.0" y="1893" width="0.3" height="15.0" fill="rgb(243,146,17)" rx="2" ry="2" />
<text  x="480.04" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="773" width="0.6" height="15.0" fill="rgb(229,20,26)" rx="2" ry="2" />
<text  x="1185.36" y="783.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (194 samples, 1.32%)</title><rect x="650.9" y="2037" width="15.6" height="15.0" fill="rgb(238,156,18)" rx="2" ry="2" />
<text  x="653.86" y="2047.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (15 samples, 0.10%)</title><rect x="1183.8" y="2053" width="1.2" height="15.0" fill="rgb(207,118,16)" rx="2" ry="2" />
<text  x="1186.80" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="1333" width="0.6" height="15.0" fill="rgb(246,118,45)" rx="2" ry="2" />
<text  x="1185.36" y="1343.5" ></text>
</g>
<g >
<title>[unknown] (36 samples, 0.25%)</title><rect x="728.9" y="2021" width="2.9" height="15.0" fill="rgb(227,21,47)" rx="2" ry="2" />
<text  x="731.91" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="445.9" y="1669" width="0.2" height="15.0" fill="rgb(242,188,43)" rx="2" ry="2" />
<text  x="448.90" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1621" width="0.5" height="15.0" fill="rgb(248,204,50)" rx="2" ry="2" />
<text  x="1186.16" y="1631.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (362 samples, 2.47%)</title><rect x="97.1" y="2021" width="29.2" height="15.0" fill="rgb(233,229,17)" rx="2" ry="2" />
<text  x="100.15" y="2031.5" >on..</text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (3 samples, 0.02%)</title><rect x="453.9" y="1877" width="0.2" height="15.0" fill="rgb(249,154,34)" rx="2" ry="2" />
<text  x="456.87" y="1887.5" ></text>
</g>
<g >
<title>c10::TensorImpl::TensorImpl (5 samples, 0.03%)</title><rect x="640.2" y="1989" width="0.4" height="15.0" fill="rgb(231,73,18)" rx="2" ry="2" />
<text  x="643.23" y="1999.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::append (16 samples, 0.11%)</title><rect x="1022.5" y="2053" width="1.3" height="15.0" fill="rgb(208,67,22)" rx="2" ry="2" />
<text  x="1025.54" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="1189" width="8.0" height="15.0" fill="rgb(212,16,11)" rx="2" ry="2" />
<text  x="62.09" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1861" width="8.2" height="15.0" fill="rgb(228,179,12)" rx="2" ry="2" />
<text  x="62.01" y="1871.5" ></text>
</g>
<g >
<title>torch::jit::GraphExecutor::getDefaultNumBailOuts (3 samples, 0.02%)</title><rect x="1148.6" y="1989" width="0.3" height="15.0" fill="rgb(224,102,20)" rx="2" ry="2" />
<text  x="1151.64" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="459.3" y="1621" width="0.4" height="15.0" fill="rgb(213,25,2)" rx="2" ry="2" />
<text  x="462.26" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1381" width="0.7" height="15.0" fill="rgb(219,39,49)" rx="2" ry="2" />
<text  x="1185.27" y="1391.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="451.8" y="1973" width="0.1" height="15.0" fill="rgb(221,180,8)" rx="2" ry="2" />
<text  x="454.78" y="1983.5" ></text>
</g>
<g >
<title>at::assert_no_partial_overlap (2 samples, 0.01%)</title><rect x="747.6" y="2053" width="0.1" height="15.0" fill="rgb(222,102,37)" rx="2" ry="2" />
<text  x="750.58" y="2063.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (15 samples, 0.10%)</title><rect x="53.9" y="2021" width="1.2" height="15.0" fill="rgb(227,62,45)" rx="2" ry="2" />
<text  x="56.94" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="1237" width="0.6" height="15.0" fill="rgb(251,107,34)" rx="2" ry="2" />
<text  x="1185.36" y="1247.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (28 samples, 0.19%)</title><rect x="449.8" y="2005" width="2.3" height="15.0" fill="rgb(207,48,27)" rx="2" ry="2" />
<text  x="452.84" y="2015.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (4 samples, 0.03%)</title><rect x="430.3" y="1925" width="0.3" height="15.0" fill="rgb(235,12,39)" rx="2" ry="2" />
<text  x="433.29" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1061" width="0.5" height="15.0" fill="rgb(234,127,13)" rx="2" ry="2" />
<text  x="1186.16" y="1071.5" ></text>
</g>
<g >
<title>[unknown] (11 samples, 0.08%)</title><rect x="479.9" y="1941" width="0.8" height="15.0" fill="rgb(205,66,21)" rx="2" ry="2" />
<text  x="482.86" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1333" width="0.5" height="15.0" fill="rgb(235,52,43)" rx="2" ry="2" />
<text  x="1186.16" y="1343.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="485" width="8.0" height="15.0" fill="rgb(245,50,46)" rx="2" ry="2" />
<text  x="62.09" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (21 samples, 0.14%)</title><rect x="458.9" y="1861" width="1.6" height="15.0" fill="rgb(219,156,51)" rx="2" ry="2" />
<text  x="461.86" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1973" width="0.7" height="15.0" fill="rgb(215,135,12)" rx="2" ry="2" />
<text  x="1185.27" y="1983.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (2 samples, 0.01%)</title><rect x="444.1" y="1925" width="0.1" height="15.0" fill="rgb(251,218,48)" rx="2" ry="2" />
<text  x="447.05" y="1935.5" ></text>
</g>
<g >
<title>at::native::DispatchStub&lt;void  (2 samples, 0.01%)</title><rect x="632.9" y="2005" width="0.2" height="15.0" fill="rgb(241,180,41)" rx="2" ry="2" />
<text  x="635.91" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="445.9" y="1861" width="0.3" height="15.0" fill="rgb(211,121,3)" rx="2" ry="2" />
<text  x="448.90" y="1871.5" ></text>
</g>
<g >
<title>c10::DispatchKeySet::has (2 samples, 0.01%)</title><rect x="748.8" y="2021" width="0.1" height="15.0" fill="rgb(246,132,47)" rx="2" ry="2" />
<text  x="751.79" y="2031.5" ></text>
</g>
<g >
<title>TAnnotator::AnnotateDocument (2,201 samples, 15.01%)</title><rect x="454.9" y="1973" width="177.1" height="15.0" fill="rgb(228,89,42)" rx="2" ry="2" />
<text  x="457.91" y="1983.5" >TAnnotator::AnnotateDoc..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="460.2" y="1237" width="0.3" height="15.0" fill="rgb(219,4,28)" rx="2" ry="2" />
<text  x="463.23" y="1247.5" ></text>
</g>
<g >
<title>c10::TensorImpl::TensorImpl (2 samples, 0.01%)</title><rect x="635.2" y="2021" width="0.1" height="15.0" fill="rgb(230,218,36)" rx="2" ry="2" />
<text  x="638.17" y="2031.5" ></text>
</g>
<g >
<title>at::Tensor::set_ (15 samples, 0.10%)</title><rect x="475.8" y="1893" width="1.2" height="15.0" fill="rgb(225,204,50)" rx="2" ry="2" />
<text  x="478.76" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="309" width="0.6" height="15.0" fill="rgb(227,9,18)" rx="2" ry="2" />
<text  x="1185.36" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="533" width="0.6" height="15.0" fill="rgb(224,120,51)" rx="2" ry="2" />
<text  x="1185.36" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1685" width="0.7" height="15.0" fill="rgb(216,187,28)" rx="2" ry="2" />
<text  x="1185.27" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;fasttext::entry, std::allocator&lt;fasttext::entry&gt; &gt;::_M_realloc_insert&lt;fasttext::entry const&amp;&gt; (2 samples, 0.01%)</title><rect x="130.9" y="2021" width="0.1" height="15.0" fill="rgb(237,154,53)" rx="2" ry="2" />
<text  x="133.86" y="2031.5" ></text>
</g>
<g >
<title>mkl_blas_xsgemv (34 samples, 0.23%)</title><rect x="670.3" y="2037" width="2.8" height="15.0" fill="rgb(250,103,53)" rx="2" ry="2" />
<text  x="673.33" y="2047.5" ></text>
</g>
<g >
<title>c10::TensorImpl::~TensorImpl (2 samples, 0.01%)</title><rect x="643.9" y="2005" width="0.1" height="15.0" fill="rgb(230,139,13)" rx="2" ry="2" />
<text  x="646.86" y="2015.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (3 samples, 0.02%)</title><rect x="453.9" y="1925" width="0.2" height="15.0" fill="rgb(246,169,2)" rx="2" ry="2" />
<text  x="456.87" y="1935.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.02%)</title><rect x="685.7" y="2021" width="0.2" height="15.0" fill="rgb(210,200,32)" rx="2" ry="2" />
<text  x="688.70" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.5" y="1365" width="0.2" height="15.0" fill="rgb(227,61,54)" rx="2" ry="2" />
<text  x="462.50" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="597" width="0.5" height="15.0" fill="rgb(243,214,28)" rx="2" ry="2" />
<text  x="1186.16" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="445.9" y="1797" width="0.3" height="15.0" fill="rgb(248,219,0)" rx="2" ry="2" />
<text  x="448.90" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="325" width="0.6" height="15.0" fill="rgb(222,184,23)" rx="2" ry="2" />
<text  x="1185.36" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.2" y="437" width="0.5" height="15.0" fill="rgb(217,29,21)" rx="2" ry="2" />
<text  x="1186.24" y="447.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1877" width="8.2" height="15.0" fill="rgb(237,69,52)" rx="2" ry="2" />
<text  x="62.01" y="1887.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (440 samples, 3.00%)</title><rect x="687.5" y="2037" width="35.4" height="15.0" fill="rgb(230,67,36)" rx="2" ry="2" />
<text  x="690.47" y="2047.5" >onm..</text>
</g>
<g >
<title>std::__exception_ptr::operator== (2 samples, 0.01%)</title><rect x="189.0" y="1973" width="0.1" height="15.0" fill="rgb(224,108,43)" rx="2" ry="2" />
<text  x="191.96" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="446.1" y="1525" width="0.1" height="15.0" fill="rgb(218,194,0)" rx="2" ry="2" />
<text  x="449.06" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="459.9" y="1669" width="0.6" height="15.0" fill="rgb(217,203,0)" rx="2" ry="2" />
<text  x="462.90" y="1679.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getId (136 samples, 0.93%)</title><rect x="774.3" y="2053" width="10.9" height="15.0" fill="rgb(209,206,46)" rx="2" ry="2" />
<text  x="777.30" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="459.3" y="1669" width="0.4" height="15.0" fill="rgb(243,47,8)" rx="2" ry="2" />
<text  x="462.26" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="613" width="0.5" height="15.0" fill="rgb(217,170,21)" rx="2" ry="2" />
<text  x="1186.16" y="623.5" ></text>
</g>
<g >
<title>torch::jit::GraphFunction::run (90 samples, 0.61%)</title><rect x="1147.2" y="2037" width="7.2" height="15.0" fill="rgb(237,202,48)" rx="2" ry="2" />
<text  x="1150.19" y="2047.5" ></text>
</g>
<g >
<title>c10::VariableVersion::VersionCounter::~VersionCounter (2 samples, 0.01%)</title><rect x="1147.0" y="2037" width="0.2" height="15.0" fill="rgb(235,155,38)" rx="2" ry="2" />
<text  x="1150.03" y="2047.5" ></text>
</g>
<g >
<title>at::native::unsqueeze (2 samples, 0.01%)</title><rect x="644.9" y="2005" width="0.2" height="15.0" fill="rgb(252,199,39)" rx="2" ry="2" />
<text  x="647.90" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1181.9" y="2037" width="0.4" height="15.0" fill="rgb(243,225,7)" rx="2" ry="2" />
<text  x="1184.87" y="2047.5" ></text>
</g>
<g >
<title>c10::Dispatcher::singleton (2 samples, 0.01%)</title><rect x="478.5" y="1893" width="0.2" height="15.0" fill="rgb(210,24,7)" rx="2" ry="2" />
<text  x="481.49" y="1903.5" ></text>
</g>
<g >
<title>at::native::copy_impl (11 samples, 0.08%)</title><rect x="747.9" y="2037" width="0.9" height="15.0" fill="rgb(207,121,51)" rx="2" ry="2" />
<text  x="750.90" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.03%)</title><rect x="635.9" y="1989" width="0.3" height="15.0" fill="rgb(210,165,27)" rx="2" ry="2" />
<text  x="638.89" y="1999.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (37 samples, 0.25%)</title><rect x="1150.7" y="1941" width="2.9" height="15.0" fill="rgb(215,151,4)" rx="2" ry="2" />
<text  x="1153.65" y="1951.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::add_Tensor (3 samples, 0.02%)</title><rect x="1153.6" y="1941" width="0.3" height="15.0" fill="rgb(244,80,11)" rx="2" ry="2" />
<text  x="1156.63" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1013" width="0.5" height="15.0" fill="rgb(229,171,39)" rx="2" ry="2" />
<text  x="1186.16" y="1023.5" ></text>
</g>
<g >
<title>torch::jit::GraphExecutor::run (2 samples, 0.01%)</title><rect x="1147.2" y="2005" width="0.2" height="15.0" fill="rgb(221,156,6)" rx="2" ry="2" />
<text  x="1150.19" y="2015.5" ></text>
</g>
<g >
<title>at::TensorIterator::nullary_op (12 samples, 0.08%)</title><rect x="65.6" y="69" width="1.0" height="15.0" fill="rgb(237,109,16)" rx="2" ry="2" />
<text  x="68.60" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="445.9" y="1557" width="0.2" height="15.0" fill="rgb(244,60,54)" rx="2" ry="2" />
<text  x="448.90" y="1567.5" ></text>
</g>
<g >
<title>[unknown] (89 samples, 0.61%)</title><rect x="635.6" y="2021" width="7.1" height="15.0" fill="rgb(253,67,22)" rx="2" ry="2" />
<text  x="638.57" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1183.0" y="2005" width="0.7" height="15.0" fill="rgb(254,170,28)" rx="2" ry="2" />
<text  x="1186.00" y="2015.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (29 samples, 0.20%)</title><rect x="432.8" y="1925" width="2.3" height="15.0" fill="rgb(228,12,11)" rx="2" ry="2" />
<text  x="435.79" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="460.1" y="1525" width="0.4" height="15.0" fill="rgb(211,65,44)" rx="2" ry="2" />
<text  x="463.14" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1701" width="0.7" height="15.0" fill="rgb(247,55,48)" rx="2" ry="2" />
<text  x="1185.27" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="773" width="0.5" height="15.0" fill="rgb(222,10,36)" rx="2" ry="2" />
<text  x="1186.16" y="783.5" ></text>
</g>
<g >
<title>c10::TensorImpl::~TensorImpl (89 samples, 0.61%)</title><rect x="635.6" y="2037" width="7.1" height="15.0" fill="rgb(223,92,11)" rx="2" ry="2" />
<text  x="638.57" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="460.1" y="1349" width="0.4" height="15.0" fill="rgb(205,180,45)" rx="2" ry="2" />
<text  x="463.14" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.2" y="133" width="0.5" height="15.0" fill="rgb(226,222,17)" rx="2" ry="2" />
<text  x="1186.24" y="143.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::has_features (3 samples, 0.02%)</title><rect x="1024.1" y="2053" width="0.2" height="15.0" fill="rgb(213,16,29)" rx="2" ry="2" />
<text  x="1027.07" y="2063.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (18 samples, 0.12%)</title><rect x="611.9" y="1941" width="1.5" height="15.0" fill="rgb(210,165,24)" rx="2" ry="2" />
<text  x="614.91" y="1951.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.01%)</title><rect x="1163.0" y="2037" width="0.2" height="15.0" fill="rgb(222,76,19)" rx="2" ry="2" />
<text  x="1166.04" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="981" width="0.6" height="15.0" fill="rgb(211,206,0)" rx="2" ry="2" />
<text  x="1185.36" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1477" width="0.5" height="15.0" fill="rgb(217,63,4)" rx="2" ry="2" />
<text  x="1186.16" y="1487.5" ></text>
</g>
<g >
<title>TDbDocument::operator= (8 samples, 0.05%)</title><rect x="427.0" y="1941" width="0.6" height="15.0" fill="rgb(234,80,9)" rx="2" ry="2" />
<text  x="429.99" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (10 samples, 0.07%)</title><rect x="1183.0" y="2053" width="0.8" height="15.0" fill="rgb(218,131,21)" rx="2" ry="2" />
<text  x="1186.00" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="501" width="8.0" height="15.0" fill="rgb(226,154,6)" rx="2" ry="2" />
<text  x="62.09" y="511.5" ></text>
</g>
<g >
<title>torch::autograd::AccumulateGrad::~AccumulateGrad (3 samples, 0.02%)</title><rect x="733.5" y="2037" width="0.2" height="15.0" fill="rgb(207,99,50)" rx="2" ry="2" />
<text  x="736.50" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="446.1" y="1589" width="0.1" height="15.0" fill="rgb(224,55,38)" rx="2" ry="2" />
<text  x="449.06" y="1599.5" ></text>
</g>
<g >
<title>tg::from_json&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (2 samples, 0.01%)</title><rect x="458.6" y="1941" width="0.2" height="15.0" fill="rgb(251,111,28)" rx="2" ry="2" />
<text  x="461.62" y="1951.5" ></text>
</g>
<g >
<title>std::__move_merge&lt;__gnu_cxx::__normal_iterator&lt;TDbDocument*, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, TDbDocument*, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (2 samples, 0.01%)</title><rect x="427.6" y="1957" width="0.2" height="15.0" fill="rgb(253,200,1)" rx="2" ry="2" />
<text  x="430.64" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (20 samples, 0.14%)</title><rect x="458.9" y="1797" width="1.6" height="15.0" fill="rgb(224,123,27)" rx="2" ry="2" />
<text  x="461.94" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="1365" width="0.6" height="15.0" fill="rgb(212,73,22)" rx="2" ry="2" />
<text  x="1185.36" y="1375.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1653" width="8.2" height="15.0" fill="rgb(248,51,17)" rx="2" ry="2" />
<text  x="62.01" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="459.4" y="1413" width="0.3" height="15.0" fill="rgb(249,26,38)" rx="2" ry="2" />
<text  x="462.42" y="1423.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (4 samples, 0.03%)</title><rect x="75.2" y="2005" width="0.3" height="15.0" fill="rgb(244,162,42)" rx="2" ry="2" />
<text  x="78.18" y="2015.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (4 samples, 0.03%)</title><rect x="71.7" y="2005" width="0.3" height="15.0" fill="rgb(219,99,15)" rx="2" ry="2" />
<text  x="74.72" y="2015.5" ></text>
</g>
<g >
<title>at::native::legacy::cpu::_th_addmm_out (4 samples, 0.03%)</title><rect x="64.2" y="69" width="0.3" height="15.0" fill="rgb(218,4,39)" rx="2" ry="2" />
<text  x="67.16" y="79.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (447 samples, 3.05%)</title><rect x="1025.8" y="2053" width="36.0" height="15.0" fill="rgb(244,217,1)" rx="2" ry="2" />
<text  x="1028.84" y="2063.5" >onm..</text>
</g>
<g >
<title>TNewsCluster::CalcFeatures (201 samples, 1.37%)</title><rect x="428.6" y="1973" width="16.2" height="15.0" fill="rgb(221,220,21)" rx="2" ry="2" />
<text  x="431.60" y="1983.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (4 samples, 0.03%)</title><rect x="453.0" y="1925" width="0.3" height="15.0" fill="rgb(254,91,29)" rx="2" ry="2" />
<text  x="455.98" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="1061" width="0.6" height="15.0" fill="rgb(226,172,51)" rx="2" ry="2" />
<text  x="1185.36" y="1071.5" ></text>
</g>
<g >
<title>torch::autograd::VariableHooks::grad_fn (3 samples, 0.02%)</title><rect x="636.0" y="1973" width="0.2" height="15.0" fill="rgb(218,83,41)" rx="2" ry="2" />
<text  x="638.97" y="1983.5" ></text>
</g>
<g >
<title>std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;::emplace_back&lt;c10::IValue&gt; (2 samples, 0.01%)</title><rect x="130.7" y="2021" width="0.2" height="15.0" fill="rgb(248,34,43)" rx="2" ry="2" />
<text  x="133.70" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="446.1" y="1669" width="0.1" height="15.0" fill="rgb(211,10,17)" rx="2" ry="2" />
<text  x="449.06" y="1679.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::dump (33 samples, 0.23%)</title><rect x="447.2" y="2005" width="2.6" height="15.0" fill="rgb(240,107,49)" rx="2" ry="2" />
<text  x="450.19" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (20 samples, 0.14%)</title><rect x="643.0" y="2021" width="1.6" height="15.0" fill="rgb(238,49,20)" rx="2" ry="2" />
<text  x="645.97" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="446.1" y="1461" width="0.1" height="15.0" fill="rgb(219,45,45)" rx="2" ry="2" />
<text  x="449.06" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="446.1" y="1509" width="0.1" height="15.0" fill="rgb(240,150,7)" rx="2" ry="2" />
<text  x="449.06" y="1519.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="735.7" y="2021" width="0.1" height="15.0" fill="rgb(250,133,52)" rx="2" ry="2" />
<text  x="738.67" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (103 samples, 0.70%)</title><rect x="58.9" y="1941" width="8.3" height="15.0" fill="rgb(225,109,18)" rx="2" ry="2" />
<text  x="61.93" y="1951.5" ></text>
</g>
<g >
<title>cfree (3 samples, 0.02%)</title><rect x="644.3" y="2005" width="0.3" height="15.0" fill="rgb(213,6,34)" rx="2" ry="2" />
<text  x="647.34" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1365" width="0.5" height="15.0" fill="rgb(226,49,53)" rx="2" ry="2" />
<text  x="1186.16" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="459.5" y="1397" width="0.2" height="15.0" fill="rgb(219,161,13)" rx="2" ry="2" />
<text  x="462.50" y="1407.5" ></text>
</g>
<g >
<title>at::TensorIterator::analyze_memory_format (3 samples, 0.02%)</title><rect x="72.9" y="2021" width="0.3" height="15.0" fill="rgb(237,93,49)" rx="2" ry="2" />
<text  x="75.93" y="2031.5" ></text>
</g>
<g >
<title>std::__stable_sort_adaptive&lt;__gnu_cxx::__normal_iterator&lt;TDbDocument*, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, TDbDocument*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (11 samples, 0.08%)</title><rect x="426.9" y="1989" width="0.9" height="15.0" fill="rgb(211,139,4)" rx="2" ry="2" />
<text  x="429.91" y="1999.5" ></text>
</g>
<g >
<title>at::TensorIterator::compute_types (5 samples, 0.03%)</title><rect x="65.9" y="37" width="0.4" height="15.0" fill="rgb(205,125,21)" rx="2" ry="2" />
<text  x="68.93" y="47.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::_M_realloc_insert&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (2 samples, 0.01%)</title><rect x="453.3" y="1989" width="0.2" height="15.0" fill="rgb(248,127,42)" rx="2" ry="2" />
<text  x="456.30" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="445.9" y="1717" width="0.2" height="15.0" fill="rgb(223,193,21)" rx="2" ry="2" />
<text  x="448.90" y="1727.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (5 samples, 0.03%)</title><rect x="179.3" y="1925" width="0.4" height="15.0" fill="rgb(241,67,52)" rx="2" ry="2" />
<text  x="182.31" y="1935.5" ></text>
</g>
<g >
<title>c10::IValue::toTensor (4 samples, 0.03%)</title><rect x="1147.9" y="1957" width="0.3" height="15.0" fill="rgb(244,172,0)" rx="2" ry="2" />
<text  x="1150.91" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1183.0" y="2037" width="0.7" height="15.0" fill="rgb(216,43,41)" rx="2" ry="2" />
<text  x="1186.00" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1181.9" y="2021" width="0.4" height="15.0" fill="rgb(226,113,26)" rx="2" ry="2" />
<text  x="1184.87" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="357" width="8.0" height="15.0" fill="rgb(223,129,48)" rx="2" ry="2" />
<text  x="62.09" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="460.1" y="1317" width="0.4" height="15.0" fill="rgb(227,216,34)" rx="2" ry="2" />
<text  x="463.14" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="501" width="0.6" height="15.0" fill="rgb(205,182,25)" rx="2" ry="2" />
<text  x="1185.36" y="511.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (5 samples, 0.03%)</title><rect x="63.0" y="53" width="0.4" height="15.0" fill="rgb(242,70,24)" rx="2" ry="2" />
<text  x="66.03" y="63.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="739.3" y="2053" width="0.2" height="15.0" fill="rgb(211,222,27)" rx="2" ry="2" />
<text  x="742.29" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="735.7" y="2005" width="0.1" height="15.0" fill="rgb(231,125,15)" rx="2" ry="2" />
<text  x="738.67" y="2015.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (4 samples, 0.03%)</title><rect x="452.2" y="1989" width="0.3" height="15.0" fill="rgb(225,114,2)" rx="2" ry="2" />
<text  x="455.18" y="1999.5" ></text>
</g>
<g >
<title>at::native::add (5 samples, 0.03%)</title><rect x="1151.1" y="1893" width="0.4" height="15.0" fill="rgb(247,175,2)" rx="2" ry="2" />
<text  x="1154.05" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="460.1" y="1541" width="0.4" height="15.0" fill="rgb(250,123,5)" rx="2" ry="2" />
<text  x="463.14" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="1013" width="0.6" height="15.0" fill="rgb(253,113,27)" rx="2" ry="2" />
<text  x="1185.36" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1183.1" y="1653" width="0.6" height="15.0" fill="rgb(236,155,51)" rx="2" ry="2" />
<text  x="1186.08" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.2" y="117" width="0.5" height="15.0" fill="rgb(237,194,38)" rx="2" ry="2" />
<text  x="1186.24" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1797" width="0.7" height="15.0" fill="rgb(254,18,22)" rx="2" ry="2" />
<text  x="1185.27" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="629" width="8.0" height="15.0" fill="rgb(232,201,54)" rx="2" ry="2" />
<text  x="62.09" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (8 samples, 0.05%)</title><rect x="677.1" y="2021" width="0.6" height="15.0" fill="rgb(223,149,16)" rx="2" ry="2" />
<text  x="680.09" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="1077" width="0.6" height="15.0" fill="rgb(217,85,43)" rx="2" ry="2" />
<text  x="1185.36" y="1087.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::slice_Tensor (2 samples, 0.01%)</title><rect x="473.7" y="1909" width="0.2" height="15.0" fill="rgb(239,218,18)" rx="2" ry="2" />
<text  x="476.74" y="1919.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (20 samples, 0.14%)</title><rect x="678.9" y="2037" width="1.6" height="15.0" fill="rgb(212,147,38)" rx="2" ry="2" />
<text  x="681.86" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="445.9" y="1509" width="0.2" height="15.0" fill="rgb(228,178,47)" rx="2" ry="2" />
<text  x="448.90" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1077" width="0.5" height="15.0" fill="rgb(208,2,8)" rx="2" ry="2" />
<text  x="1186.16" y="1087.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="642.7" y="2021" width="0.3" height="15.0" fill="rgb(230,8,38)" rx="2" ry="2" />
<text  x="645.73" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="581" width="0.6" height="15.0" fill="rgb(211,218,21)" rx="2" ry="2" />
<text  x="1185.36" y="591.5" ></text>
</g>
<g >
<title>TNewsCluster::CalcImportance (215 samples, 1.47%)</title><rect x="428.5" y="1989" width="17.3" height="15.0" fill="rgb(233,91,42)" rx="2" ry="2" />
<text  x="431.52" y="1999.5" ></text>
</g>
<g >
<title>RunFasttextClf (12 samples, 0.08%)</title><rect x="455.2" y="1941" width="1.0" height="15.0" fill="rgb(205,196,31)" rx="2" ry="2" />
<text  x="458.24" y="1951.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (3 samples, 0.02%)</title><rect x="453.9" y="1973" width="0.2" height="15.0" fill="rgb(228,176,25)" rx="2" ry="2" />
<text  x="456.87" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1269" width="8.1" height="15.0" fill="rgb(244,175,34)" rx="2" ry="2" />
<text  x="62.09" y="1279.5" ></text>
</g>
<g >
<title>at::empty (2 samples, 0.01%)</title><rect x="750.4" y="2021" width="0.2" height="15.0" fill="rgb(234,99,33)" rx="2" ry="2" />
<text  x="753.40" y="2031.5" ></text>
</g>
<g >
<title>at::TensorIterator::build (9 samples, 0.06%)</title><rect x="67.9" y="1989" width="0.7" height="15.0" fill="rgb(219,25,14)" rx="2" ry="2" />
<text  x="70.86" y="1999.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (30 samples, 0.20%)</title><rect x="447.2" y="1941" width="2.4" height="15.0" fill="rgb(240,65,40)" rx="2" ry="2" />
<text  x="450.19" y="1951.5" ></text>
</g>
<g >
<title>TSlinkClustering::CalcDistances (216 samples, 1.47%)</title><rect x="408.8" y="1957" width="17.4" height="15.0" fill="rgb(244,101,26)" rx="2" ry="2" />
<text  x="411.81" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="997" width="8.0" height="15.0" fill="rgb(248,72,30)" rx="2" ry="2" />
<text  x="62.09" y="1007.5" ></text>
</g>
<g >
<title>c10::impl::ExcludeDispatchKeyGuard::ExcludeDispatchKeyGuard (2 samples, 0.01%)</title><rect x="732.9" y="2021" width="0.1" height="15.0" fill="rgb(232,91,35)" rx="2" ry="2" />
<text  x="735.85" y="2031.5" ></text>
</g>
<g >
<title>at::CPUType::zero_ (2 samples, 0.01%)</title><rect x="59.2" y="37" width="0.1" height="15.0" fill="rgb(215,29,50)" rx="2" ry="2" />
<text  x="62.17" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22 samples, 0.15%)</title><rect x="458.8" y="1925" width="1.7" height="15.0" fill="rgb(251,60,28)" rx="2" ry="2" />
<text  x="461.78" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (7 samples, 0.05%)</title><rect x="733.8" y="2021" width="0.6" height="15.0" fill="rgb(216,150,25)" rx="2" ry="2" />
<text  x="736.82" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="460.1" y="1381" width="0.4" height="15.0" fill="rgb(220,221,54)" rx="2" ry="2" />
<text  x="463.14" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1182.4" y="85" width="0.6" height="15.0" fill="rgb(238,44,1)" rx="2" ry="2" />
<text  x="1185.44" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (20 samples, 0.14%)</title><rect x="458.9" y="1813" width="1.6" height="15.0" fill="rgb(224,226,36)" rx="2" ry="2" />
<text  x="461.94" y="1823.5" ></text>
</g>
<g >
<title>TNewsCluster::SortByWeights (2 samples, 0.01%)</title><rect x="446.2" y="1973" width="0.2" height="15.0" fill="rgb(215,150,51)" rx="2" ry="2" />
<text  x="449.22" y="1983.5" ></text>
</g>
<g >
<title>at::from_blob (27 samples, 0.18%)</title><rect x="475.4" y="1909" width="2.2" height="15.0" fill="rgb(242,31,40)" rx="2" ry="2" />
<text  x="478.43" y="1919.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const*, std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;*&gt; (3 samples, 0.02%)</title><rect x="453.9" y="1893" width="0.2" height="15.0" fill="rgb(251,65,28)" rx="2" ry="2" />
<text  x="456.87" y="1903.5" ></text>
</g>
<g >
<title>free@plt (2 samples, 0.01%)</title><rect x="79.4" y="2021" width="0.2" height="15.0" fill="rgb(227,69,11)" rx="2" ry="2" />
<text  x="82.44" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1397" width="0.7" height="15.0" fill="rgb(238,70,10)" rx="2" ry="2" />
<text  x="1185.27" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="445.9" y="1621" width="0.2" height="15.0" fill="rgb(236,183,9)" rx="2" ry="2" />
<text  x="448.90" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1861" width="0.7" height="15.0" fill="rgb(254,227,40)" rx="2" ry="2" />
<text  x="1185.27" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="629" width="0.6" height="15.0" fill="rgb(217,142,25)" rx="2" ry="2" />
<text  x="1185.36" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1477" width="0.7" height="15.0" fill="rgb(250,28,18)" rx="2" ry="2" />
<text  x="1185.27" y="1487.5" ></text>
</g>
<g >
<title>torch::autograd::make_variable_differentiable_view (3 samples, 0.02%)</title><rect x="643.4" y="1989" width="0.2" height="15.0" fill="rgb(221,47,16)" rx="2" ry="2" />
<text  x="646.37" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="709" width="0.5" height="15.0" fill="rgb(232,62,11)" rx="2" ry="2" />
<text  x="1186.16" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="460.1" y="1637" width="0.4" height="15.0" fill="rgb(231,189,37)" rx="2" ry="2" />
<text  x="463.06" y="1647.5" ></text>
</g>
<g >
<title>at::TensorIterator::get_strides (2 samples, 0.01%)</title><rect x="747.3" y="2053" width="0.1" height="15.0" fill="rgb(207,7,43)" rx="2" ry="2" />
<text  x="750.26" y="2063.5" ></text>
</g>
<g >
<title>at::(anonymous namespace)::empty_memory_format (3 samples, 0.02%)</title><rect x="751.6" y="2021" width="0.2" height="15.0" fill="rgb(235,222,44)" rx="2" ry="2" />
<text  x="754.60" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1717" width="8.2" height="15.0" fill="rgb(207,131,47)" rx="2" ry="2" />
<text  x="62.01" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (2 samples, 0.01%)</title><rect x="731.8" y="2037" width="0.2" height="15.0" fill="rgb(232,29,18)" rx="2" ry="2" />
<text  x="734.81" y="2047.5" ></text>
</g>
<g >
<title>c10::KernelFunction::callUnboxed&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Storage, long, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt; &gt; (10 samples, 0.07%)</title><rect x="476.1" y="1829" width="0.8" height="15.0" fill="rgb(234,51,49)" rx="2" ry="2" />
<text  x="479.08" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="645" width="0.6" height="15.0" fill="rgb(206,42,14)" rx="2" ry="2" />
<text  x="1185.36" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1181.9" y="1925" width="0.1" height="15.0" fill="rgb(208,162,35)" rx="2" ry="2" />
<text  x="1184.87" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1957" width="0.7" height="15.0" fill="rgb(230,40,52)" rx="2" ry="2" />
<text  x="1185.27" y="1967.5" ></text>
</g>
<g >
<title>at::TensorIterator::allocate_outputs (2 samples, 0.01%)</title><rect x="68.0" y="1973" width="0.2" height="15.0" fill="rgb(205,0,13)" rx="2" ry="2" />
<text  x="71.02" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1183.1" y="1861" width="0.6" height="15.0" fill="rgb(211,34,34)" rx="2" ry="2" />
<text  x="1186.08" y="1871.5" ></text>
</g>
<g >
<title>at::CPUType::add_Tensor (2 samples, 0.01%)</title><rect x="1150.7" y="1925" width="0.1" height="15.0" fill="rgb(213,201,45)" rx="2" ry="2" />
<text  x="1153.65" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="645" width="0.5" height="15.0" fill="rgb(233,209,17)" rx="2" ry="2" />
<text  x="1186.16" y="655.5" ></text>
</g>
<g >
<title>c10::DispatchKeySet::has (2 samples, 0.01%)</title><rect x="73.0" y="1989" width="0.2" height="15.0" fill="rgb(218,98,33)" rx="2" ry="2" />
<text  x="76.01" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1509" width="0.5" height="15.0" fill="rgb(220,213,7)" rx="2" ry="2" />
<text  x="1186.16" y="1519.5" ></text>
</g>
<g >
<title>__sched_yield (10 samples, 0.07%)</title><rect x="745.6" y="2053" width="0.8" height="15.0" fill="rgb(237,49,19)" rx="2" ry="2" />
<text  x="748.57" y="2063.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (2 samples, 0.01%)</title><rect x="754.1" y="2021" width="0.2" height="15.0" fill="rgb(236,45,53)" rx="2" ry="2" />
<text  x="757.10" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="821" width="0.6" height="15.0" fill="rgb(242,129,15)" rx="2" ry="2" />
<text  x="1185.36" y="831.5" ></text>
</g>
<g >
<title>__kmp_hardware_timestamp (71 samples, 0.48%)</title><rect x="739.5" y="2053" width="5.7" height="15.0" fill="rgb(223,216,17)" rx="2" ry="2" />
<text  x="742.53" y="2063.5" ></text>
</g>
<g >
<title>c10::StorageImpl::~StorageImpl (8 samples, 0.05%)</title><rect x="634.5" y="2037" width="0.7" height="15.0" fill="rgb(252,83,23)" rx="2" ry="2" />
<text  x="637.52" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::vector (3 samples, 0.02%)</title><rect x="453.9" y="1909" width="0.2" height="15.0" fill="rgb(245,175,2)" rx="2" ry="2" />
<text  x="456.87" y="1919.5" ></text>
</g>
<g >
<title>at::CPUType::div_Tensor (5 samples, 0.03%)</title><rect x="632.7" y="2037" width="0.4" height="15.0" fill="rgb(209,93,22)" rx="2" ry="2" />
<text  x="635.67" y="2047.5" ></text>
</g>
<g >
<title>c10::detail::make_boxed_from_unboxed_functor&lt;c10::detail::WrapKernelFunction_&lt;long  (2 samples, 0.01%)</title><rect x="73.6" y="2021" width="0.1" height="15.0" fill="rgb(219,0,34)" rx="2" ry="2" />
<text  x="76.57" y="2031.5" ></text>
</g>
<g >
<title>at::CPUType::mm (3 samples, 0.02%)</title><rect x="72.4" y="2021" width="0.3" height="15.0" fill="rgb(213,203,16)" rx="2" ry="2" />
<text  x="75.44" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="693" width="0.6" height="15.0" fill="rgb(214,13,32)" rx="2" ry="2" />
<text  x="1185.36" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1183.1" y="1845" width="0.6" height="15.0" fill="rgb(244,203,6)" rx="2" ry="2" />
<text  x="1186.08" y="1855.5" ></text>
</g>
<g >
<title>at::native::legacy::cpu::_th_set_ (2 samples, 0.01%)</title><rect x="476.7" y="1781" width="0.2" height="15.0" fill="rgb(211,210,0)" rx="2" ry="2" />
<text  x="479.72" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="613" width="8.0" height="15.0" fill="rgb(235,10,1)" rx="2" ry="2" />
<text  x="62.09" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="444.6" y="1957" width="0.2" height="15.0" fill="rgb(242,20,47)" rx="2" ry="2" />
<text  x="447.61" y="1967.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="737.5" y="2005" width="0.2" height="15.0" fill="rgb(236,144,9)" rx="2" ry="2" />
<text  x="740.52" y="2015.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (12 samples, 0.08%)</title><rect x="724.6" y="2037" width="1.0" height="15.0" fill="rgb(219,140,38)" rx="2" ry="2" />
<text  x="727.65" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="885" width="0.6" height="15.0" fill="rgb(247,32,28)" rx="2" ry="2" />
<text  x="1185.36" y="895.5" ></text>
</g>
<g >
<title>at::native::DispatchStub&lt;void  (8 samples, 0.05%)</title><rect x="1151.7" y="1861" width="0.6" height="15.0" fill="rgb(211,62,19)" rx="2" ry="2" />
<text  x="1154.70" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="459.3" y="1701" width="0.4" height="15.0" fill="rgb(209,58,32)" rx="2" ry="2" />
<text  x="462.26" y="1711.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (5 samples, 0.03%)</title><rect x="728.9" y="2005" width="0.4" height="15.0" fill="rgb(235,144,41)" rx="2" ry="2" />
<text  x="731.91" y="2015.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (3 samples, 0.02%)</title><rect x="453.1" y="1893" width="0.2" height="15.0" fill="rgb(242,72,10)" rx="2" ry="2" />
<text  x="456.06" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.5" y="1349" width="0.2" height="15.0" fill="rgb(242,175,49)" rx="2" ry="2" />
<text  x="462.50" y="1359.5" ></text>
</g>
<g >
<title>cfree (2 samples, 0.01%)</title><rect x="444.6" y="1941" width="0.2" height="15.0" fill="rgb(247,218,46)" rx="2" ry="2" />
<text  x="447.61" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="453" width="0.6" height="15.0" fill="rgb(244,3,11)" rx="2" ry="2" />
<text  x="1185.36" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.3" y="1429" width="0.1" height="15.0" fill="rgb(234,75,17)" rx="2" ry="2" />
<text  x="462.26" y="1439.5" ></text>
</g>
<g >
<title>at::native::resize_ (2 samples, 0.01%)</title><rect x="60.1" y="37" width="0.2" height="15.0" fill="rgb(238,132,45)" rx="2" ry="2" />
<text  x="63.13" y="47.5" ></text>
</g>
<g >
<title>c10::OperatorHandle::callUnboxed&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Storage, long, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt; &gt; (13 samples, 0.09%)</title><rect x="475.9" y="1877" width="1.1" height="15.0" fill="rgb(208,203,18)" rx="2" ry="2" />
<text  x="478.92" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="1109" width="8.0" height="15.0" fill="rgb(247,127,54)" rx="2" ry="2" />
<text  x="62.09" y="1119.5" ></text>
</g>
<g >
<title>[unknown] (63 samples, 0.43%)</title><rect x="59.1" y="85" width="5.1" height="15.0" fill="rgb(221,106,32)" rx="2" ry="2" />
<text  x="62.09" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="460.1" y="1605" width="0.4" height="15.0" fill="rgb(218,126,14)" rx="2" ry="2" />
<text  x="463.06" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="446.1" y="1749" width="0.1" height="15.0" fill="rgb(213,93,46)" rx="2" ry="2" />
<text  x="449.06" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="565" width="8.0" height="15.0" fill="rgb(220,137,21)" rx="2" ry="2" />
<text  x="62.09" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1181.9" y="1973" width="0.1" height="15.0" fill="rgb(221,55,25)" rx="2" ry="2" />
<text  x="1184.87" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="805" width="0.5" height="15.0" fill="rgb(218,9,5)" rx="2" ry="2" />
<text  x="1186.16" y="815.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::initNgrams (3 samples, 0.02%)</title><rect x="816.3" y="2053" width="0.2" height="15.0" fill="rgb(214,82,0)" rx="2" ry="2" />
<text  x="819.30" y="2063.5" ></text>
</g>
<g >
<title>at::TensorIterator::build (5 samples, 0.03%)</title><rect x="749.1" y="2005" width="0.4" height="15.0" fill="rgb(232,72,9)" rx="2" ry="2" />
<text  x="752.11" y="2015.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (2 samples, 0.01%)</title><rect x="453.3" y="1973" width="0.2" height="15.0" fill="rgb(222,173,32)" rx="2" ry="2" />
<text  x="456.30" y="1983.5" ></text>
</g>
<g >
<title>THFloatTensor_addmmImpl (3 samples, 0.02%)</title><rect x="635.6" y="2005" width="0.3" height="15.0" fill="rgb(230,72,42)" rx="2" ry="2" />
<text  x="638.65" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1493" width="0.7" height="15.0" fill="rgb(227,44,24)" rx="2" ry="2" />
<text  x="1185.27" y="1503.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::get_case (2 samples, 0.01%)</title><rect x="1023.9" y="2053" width="0.2" height="15.0" fill="rgb(244,200,23)" rx="2" ry="2" />
<text  x="1026.91" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.2" y="101" width="0.5" height="15.0" fill="rgb(227,122,6)" rx="2" ry="2" />
<text  x="1186.24" y="111.5" ></text>
</g>
<g >
<title>onmt::add_final_token&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (2 samples, 0.01%)</title><rect x="680.5" y="2037" width="0.2" height="15.0" fill="rgb(250,177,18)" rx="2" ry="2" />
<text  x="683.55" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="437" width="8.0" height="15.0" fill="rgb(250,73,23)" rx="2" ry="2" />
<text  x="62.09" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.3" y="1397" width="0.1" height="15.0" fill="rgb(227,85,20)" rx="2" ry="2" />
<text  x="462.26" y="1407.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::scan (4 samples, 0.03%)</title><rect x="176.2" y="1941" width="0.4" height="15.0" fill="rgb(231,105,52)" rx="2" ry="2" />
<text  x="179.25" y="1951.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (3 samples, 0.02%)</title><rect x="453.9" y="1957" width="0.2" height="15.0" fill="rgb(207,197,42)" rx="2" ry="2" />
<text  x="456.87" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="460.1" y="1333" width="0.4" height="15.0" fill="rgb(240,166,48)" rx="2" ry="2" />
<text  x="463.14" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="460.4" y="1061" width="0.1" height="15.0" fill="rgb(209,14,1)" rx="2" ry="2" />
<text  x="463.39" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="459.3" y="1589" width="0.4" height="15.0" fill="rgb(241,8,13)" rx="2" ry="2" />
<text  x="462.26" y="1599.5" ></text>
</g>
<g >
<title>TAnnotator::AnnotateAll (190 samples, 1.30%)</title><rect x="174.0" y="2005" width="15.3" height="15.0" fill="rgb(232,7,23)" rx="2" ry="2" />
<text  x="177.00" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1477" width="8.1" height="15.0" fill="rgb(235,172,30)" rx="2" ry="2" />
<text  x="62.09" y="1487.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1365" width="8.1" height="15.0" fill="rgb(211,220,27)" rx="2" ry="2" />
<text  x="62.09" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="459.5" y="1381" width="0.2" height="15.0" fill="rgb(240,227,35)" rx="2" ry="2" />
<text  x="462.50" y="1391.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (419 samples, 2.86%)</title><rect x="10.1" y="2053" width="33.7" height="15.0" fill="rgb(249,217,37)" rx="2" ry="2" />
<text  x="13.08" y="2063.5" >[l..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.2" y="181" width="0.5" height="15.0" fill="rgb(224,8,21)" rx="2" ry="2" />
<text  x="1186.24" y="191.5" ></text>
</g>
<g >
<title>torch::autograd::deleteNode (3 samples, 0.02%)</title><rect x="735.2" y="2037" width="0.2" height="15.0" fill="rgb(215,82,44)" rx="2" ry="2" />
<text  x="738.19" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1349" width="0.5" height="15.0" fill="rgb(212,115,40)" rx="2" ry="2" />
<text  x="1186.16" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="757" width="0.6" height="15.0" fill="rgb(231,31,13)" rx="2" ry="2" />
<text  x="1185.36" y="767.5" ></text>
</g>
<g >
<title>at::native::(anonymous namespace)::norm_kernel_tensor_iterator_impl (6 samples, 0.04%)</title><rect x="1151.9" y="1845" width="0.4" height="15.0" fill="rgb(250,36,41)" rx="2" ry="2" />
<text  x="1154.86" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="1157" width="8.0" height="15.0" fill="rgb(251,217,44)" rx="2" ry="2" />
<text  x="62.09" y="1167.5" ></text>
</g>
<g >
<title>onmt::get_alphabet_id (4 samples, 0.03%)</title><rect x="1063.9" y="2053" width="0.3" height="15.0" fill="rgb(232,216,53)" rx="2" ry="2" />
<text  x="1066.90" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="693" width="0.5" height="15.0" fill="rgb(222,133,9)" rx="2" ry="2" />
<text  x="1186.16" y="703.5" ></text>
</g>
<g >
<title>nlohmann::detail::output_string_adapter&lt;char, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::write_characters (6 samples, 0.04%)</title><rect x="447.6" y="1909" width="0.5" height="15.0" fill="rgb(253,6,7)" rx="2" ry="2" />
<text  x="450.59" y="1919.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (5 samples, 0.03%)</title><rect x="175.1" y="1989" width="0.4" height="15.0" fill="rgb(247,53,36)" rx="2" ry="2" />
<text  x="178.12" y="1999.5" ></text>
</g>
<g >
<title>torch::autograd::impl::gradient_edge (2 samples, 0.01%)</title><rect x="131.5" y="2021" width="0.2" height="15.0" fill="rgb(228,68,19)" rx="2" ry="2" />
<text  x="134.51" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1183.0" y="2021" width="0.7" height="15.0" fill="rgb(240,160,43)" rx="2" ry="2" />
<text  x="1186.00" y="2031.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="749.1" y="1989" width="0.2" height="15.0" fill="rgb(222,14,28)" rx="2" ry="2" />
<text  x="752.11" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="1173" width="0.6" height="15.0" fill="rgb(217,32,25)" rx="2" ry="2" />
<text  x="1185.36" y="1183.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="55.3" y="1989" width="0.2" height="15.0" fill="rgb(222,117,3)" rx="2" ry="2" />
<text  x="58.30" y="1999.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (5 samples, 0.03%)</title><rect x="1177.9" y="2053" width="0.4" height="15.0" fill="rgb(241,224,28)" rx="2" ry="2" />
<text  x="1180.93" y="2063.5" ></text>
</g>
<g >
<title>at::TensorIterator::compute_names (2 samples, 0.01%)</title><rect x="64.6" y="37" width="0.2" height="15.0" fill="rgb(236,192,13)" rx="2" ry="2" />
<text  x="67.64" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="460.2" y="1205" width="0.3" height="15.0" fill="rgb(207,24,44)" rx="2" ry="2" />
<text  x="463.23" y="1215.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::addRowToVector (1,594 samples, 10.87%)</title><rect x="481.9" y="1941" width="128.2" height="15.0" fill="rgb(236,31,11)" rx="2" ry="2" />
<text  x="484.87" y="1951.5" >fasttext::DenseM..</text>
</g>
<g >
<title>[unknown] (5 samples, 0.03%)</title><rect x="732.0" y="2021" width="0.5" height="15.0" fill="rgb(215,13,22)" rx="2" ry="2" />
<text  x="735.05" y="2031.5" ></text>
</g>
<g >
<title>at::Tensor::tensor_data (2 samples, 0.01%)</title><rect x="636.9" y="1989" width="0.1" height="15.0" fill="rgb(225,155,14)" rx="2" ry="2" />
<text  x="639.85" y="1999.5" ></text>
</g>
<g >
<title>TAlexaAgencyRating::GetCountryShare (20 samples, 0.14%)</title><rect x="430.0" y="1941" width="1.6" height="15.0" fill="rgb(248,141,40)" rx="2" ry="2" />
<text  x="432.97" y="1951.5" ></text>
</g>
<g >
<title>torch::jit::(anonymous namespace)::{lambda (3 samples, 0.02%)</title><rect x="1153.9" y="1941" width="0.2" height="15.0" fill="rgb(250,45,9)" rx="2" ry="2" />
<text  x="1156.87" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1829" width="0.7" height="15.0" fill="rgb(221,164,32)" rx="2" ry="2" />
<text  x="1185.27" y="1839.5" ></text>
</g>
<g >
<title>onmt::unicode::get_lower (19 samples, 0.13%)</title><rect x="95.6" y="2021" width="1.5" height="15.0" fill="rgb(234,93,14)" rx="2" ry="2" />
<text  x="98.62" y="2031.5" ></text>
</g>
<g >
<title>at::TypeDefault::fill__Scalar (18 samples, 0.12%)</title><rect x="65.6" y="85" width="1.5" height="15.0" fill="rgb(241,229,1)" rx="2" ry="2" />
<text  x="68.60" y="95.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="133" width="8.0" height="15.0" fill="rgb(222,184,21)" rx="2" ry="2" />
<text  x="62.09" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1093" width="0.5" height="15.0" fill="rgb(252,143,29)" rx="2" ry="2" />
<text  x="1186.16" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="149" width="0.6" height="15.0" fill="rgb(227,30,32)" rx="2" ry="2" />
<text  x="1185.36" y="159.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1605" width="8.2" height="15.0" fill="rgb(215,171,36)" rx="2" ry="2" />
<text  x="62.01" y="1615.5" ></text>
</g>
<g >
<title>at::checked_dense_tensor_unwrap (2 samples, 0.01%)</title><rect x="63.6" y="37" width="0.2" height="15.0" fill="rgb(237,109,7)" rx="2" ry="2" />
<text  x="66.59" y="47.5" ></text>
</g>
<g >
<title>operator delete (10 samples, 0.07%)</title><rect x="722.9" y="2037" width="0.8" height="15.0" fill="rgb(205,193,38)" rx="2" ry="2" />
<text  x="725.88" y="2047.5" ></text>
</g>
<g >
<title>fasttext::QuantMatrix::addRowToVector (6 samples, 0.04%)</title><rect x="77.8" y="2021" width="0.5" height="15.0" fill="rgb(245,113,26)" rx="2" ry="2" />
<text  x="80.84" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1181.9" y="2005" width="0.3" height="15.0" fill="rgb(239,198,49)" rx="2" ry="2" />
<text  x="1184.87" y="2015.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (10 samples, 0.07%)</title><rect x="1163.6" y="2053" width="0.8" height="15.0" fill="rgb(237,59,40)" rx="2" ry="2" />
<text  x="1166.61" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="869" width="0.5" height="15.0" fill="rgb(222,147,28)" rx="2" ry="2" />
<text  x="1186.16" y="879.5" ></text>
</g>
<g >
<title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_insert_aux&lt;long const&amp;&gt; (3 samples, 0.02%)</title><rect x="1187.3" y="2053" width="0.2" height="15.0" fill="rgb(230,134,29)" rx="2" ry="2" />
<text  x="1190.26" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="901" width="0.6" height="15.0" fill="rgb(237,187,0)" rx="2" ry="2" />
<text  x="1185.36" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="917" width="0.5" height="15.0" fill="rgb(243,105,9)" rx="2" ry="2" />
<text  x="1186.16" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="445.9" y="1829" width="0.3" height="15.0" fill="rgb(250,66,50)" rx="2" ry="2" />
<text  x="448.90" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="213" width="8.0" height="15.0" fill="rgb(209,116,43)" rx="2" ry="2" />
<text  x="62.09" y="223.5" ></text>
</g>
<g >
<title>fasttext::NegativeSamplingLoss::NegativeSamplingLoss (2 samples, 0.01%)</title><rect x="650.7" y="2037" width="0.2" height="15.0" fill="rgb(211,211,51)" rx="2" ry="2" />
<text  x="653.70" y="2047.5" ></text>
</g>
<g >
<title>at::TensorIterator::serial_for_each (3 samples, 0.02%)</title><rect x="66.6" y="37" width="0.2" height="15.0" fill="rgb(253,100,15)" rx="2" ry="2" />
<text  x="69.57" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1605" width="0.5" height="15.0" fill="rgb(217,178,54)" rx="2" ry="2" />
<text  x="1186.16" y="1615.5" ></text>
</g>
<g >
<title>at::TensorIterator::binary_op (3 samples, 0.02%)</title><rect x="636.0" y="1925" width="0.2" height="15.0" fill="rgb(250,90,43)" rx="2" ry="2" />
<text  x="638.97" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.2" y="85" width="0.5" height="15.0" fill="rgb(245,75,47)" rx="2" ry="2" />
<text  x="1186.24" y="95.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (5 samples, 0.03%)</title><rect x="439.9" y="1941" width="0.4" height="15.0" fill="rgb(254,43,0)" rx="2" ry="2" />
<text  x="442.87" y="1951.5" ></text>
</g>
<g >
<title>std::locale::~locale (9 samples, 0.06%)</title><rect x="629.0" y="1941" width="0.7" height="15.0" fill="rgb(220,215,8)" rx="2" ry="2" />
<text  x="631.97" y="1951.5" ></text>
</g>
<g >
<title>torch::zeros (11 samples, 0.08%)</title><rect x="478.4" y="1909" width="0.9" height="15.0" fill="rgb(215,66,35)" rx="2" ry="2" />
<text  x="481.41" y="1919.5" ></text>
</g>
<g >
<title>at::TensorIterator::foreach_reduced_elt (2 samples, 0.01%)</title><rect x="1151.7" y="1845" width="0.2" height="15.0" fill="rgb(248,116,51)" rx="2" ry="2" />
<text  x="1154.70" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="725" width="8.0" height="15.0" fill="rgb(216,93,15)" rx="2" ry="2" />
<text  x="62.09" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="837" width="0.5" height="15.0" fill="rgb(245,35,45)" rx="2" ry="2" />
<text  x="1186.16" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="445.9" y="1701" width="0.2" height="15.0" fill="rgb(224,226,17)" rx="2" ry="2" />
<text  x="448.90" y="1711.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;TThreadPool::TThreadPool (7 samples, 0.05%)</title><rect x="47.4" y="2037" width="0.6" height="15.0" fill="rgb(238,134,0)" rx="2" ry="2" />
<text  x="50.42" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="1253" width="0.6" height="15.0" fill="rgb(234,141,26)" rx="2" ry="2" />
<text  x="1185.36" y="1263.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::finalize_tokens (16 samples, 0.11%)</title><rect x="1024.6" y="2053" width="1.2" height="15.0" fill="rgb(212,229,0)" rx="2" ry="2" />
<text  x="1027.56" y="2063.5" ></text>
</g>
<g >
<title>c10::TensorOptions::computeDispatchKey (3 samples, 0.02%)</title><rect x="478.9" y="1893" width="0.2" height="15.0" fill="rgb(249,115,13)" rx="2" ry="2" />
<text  x="481.89" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="165" width="8.0" height="15.0" fill="rgb(243,183,11)" rx="2" ry="2" />
<text  x="62.09" y="175.5" ></text>
</g>
<g >
<title>nlohmann::detail::parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::parse (161 samples, 1.10%)</title><rect x="175.5" y="1973" width="13.0" height="15.0" fill="rgb(222,61,39)" rx="2" ry="2" />
<text  x="178.53" y="1983.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (20 samples, 0.14%)</title><rect x="1150.9" y="1925" width="1.6" height="15.0" fill="rgb(208,17,47)" rx="2" ry="2" />
<text  x="1153.89" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1557" width="0.5" height="15.0" fill="rgb(211,77,47)" rx="2" ry="2" />
<text  x="1186.16" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (19 samples, 0.13%)</title><rect x="459.0" y="1765" width="1.5" height="15.0" fill="rgb(248,123,52)" rx="2" ry="2" />
<text  x="462.02" y="1775.5" ></text>
</g>
<g >
<title>torch::from_blob (29 samples, 0.20%)</title><rect x="475.3" y="1925" width="2.3" height="15.0" fill="rgb(213,166,39)" rx="2" ry="2" />
<text  x="478.27" y="1935.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="428.4" y="1973" width="0.1" height="15.0" fill="rgb(239,5,7)" rx="2" ry="2" />
<text  x="431.36" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="789" width="0.5" height="15.0" fill="rgb(206,80,43)" rx="2" ry="2" />
<text  x="1186.16" y="799.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (19 samples, 0.13%)</title><rect x="685.9" y="2021" width="1.6" height="15.0" fill="rgb(254,20,19)" rx="2" ry="2" />
<text  x="688.94" y="2031.5" ></text>
</g>
<g >
<title>c10::function_ref&lt;void  (3 samples, 0.02%)</title><rect x="751.3" y="2053" width="0.2" height="15.0" fill="rgb(226,163,50)" rx="2" ry="2" />
<text  x="754.28" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="325" width="8.0" height="15.0" fill="rgb(211,157,53)" rx="2" ry="2" />
<text  x="62.09" y="335.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::ctype&lt;char&gt; &gt;@plt (2 samples, 0.01%)</title><rect x="130.0" y="2021" width="0.1" height="15.0" fill="rgb(233,196,26)" rx="2" ry="2" />
<text  x="132.98" y="2031.5" ></text>
</g>
<g >
<title>tg::from_json&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (4 samples, 0.03%)</title><rect x="456.8" y="1941" width="0.3" height="15.0" fill="rgb(219,117,26)" rx="2" ry="2" />
<text  x="459.76" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="445.9" y="1733" width="0.2" height="15.0" fill="rgb(242,176,32)" rx="2" ry="2" />
<text  x="448.90" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;::emplace_back&lt;at::Tensor const&amp;&gt; (2 samples, 0.01%)</title><rect x="732.9" y="2037" width="0.1" height="15.0" fill="rgb(214,200,23)" rx="2" ry="2" />
<text  x="735.85" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="445.9" y="1589" width="0.2" height="15.0" fill="rgb(217,122,12)" rx="2" ry="2" />
<text  x="448.90" y="1599.5" ></text>
</g>
<g >
<title>at::native::mm_cpu_out (6 samples, 0.04%)</title><rect x="63.4" y="69" width="0.5" height="15.0" fill="rgb(223,88,3)" rx="2" ry="2" />
<text  x="66.43" y="79.5" ></text>
</g>
<g >
<title>fasttext::Model::predict (6 samples, 0.04%)</title><rect x="76.1" y="2021" width="0.5" height="15.0" fill="rgb(247,138,11)" rx="2" ry="2" />
<text  x="79.15" y="2031.5" ></text>
</g>
<g >
<title>c10::TensorImpl::TensorImpl (2 samples, 0.01%)</title><rect x="634.8" y="1989" width="0.2" height="15.0" fill="rgb(237,3,38)" rx="2" ry="2" />
<text  x="637.84" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="597" width="0.6" height="15.0" fill="rgb(213,43,53)" rx="2" ry="2" />
<text  x="1185.36" y="607.5" ></text>
</g>
<g >
<title>at::TypeDefault::zeros (3 samples, 0.02%)</title><rect x="752.8" y="2021" width="0.3" height="15.0" fill="rgb(206,11,10)" rx="2" ry="2" />
<text  x="755.81" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.2" y="469" width="0.5" height="15.0" fill="rgb(244,195,40)" rx="2" ry="2" />
<text  x="1186.24" y="479.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="757" width="8.0" height="15.0" fill="rgb(230,63,23)" rx="2" ry="2" />
<text  x="62.09" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="446.1" y="1541" width="0.1" height="15.0" fill="rgb(237,158,2)" rx="2" ry="2" />
<text  x="449.06" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1509" width="8.1" height="15.0" fill="rgb(249,138,4)" rx="2" ry="2" />
<text  x="62.09" y="1519.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1909" width="8.2" height="15.0" fill="rgb(249,107,2)" rx="2" ry="2" />
<text  x="62.01" y="1919.5" ></text>
</g>
<g >
<title>at::native::copy_ (15 samples, 0.10%)</title><rect x="747.7" y="2053" width="1.2" height="15.0" fill="rgb(240,153,12)" rx="2" ry="2" />
<text  x="750.74" y="2063.5" ></text>
</g>
<g >
<title>DetectCategory (23 samples, 0.16%)</title><rect x="455.2" y="1957" width="1.9" height="15.0" fill="rgb(213,187,11)" rx="2" ry="2" />
<text  x="458.24" y="1967.5" ></text>
</g>
<g >
<title>at::native::div (4 samples, 0.03%)</title><rect x="632.8" y="2021" width="0.3" height="15.0" fill="rgb(207,204,9)" rx="2" ry="2" />
<text  x="635.75" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="459.3" y="1365" width="0.1" height="15.0" fill="rgb(251,104,43)" rx="2" ry="2" />
<text  x="462.26" y="1375.5" ></text>
</g>
<g >
<title>[unknown] (6 samples, 0.04%)</title><rect x="737.5" y="2021" width="0.5" height="15.0" fill="rgb(238,85,17)" rx="2" ry="2" />
<text  x="740.52" y="2031.5" ></text>
</g>
<g >
<title>fasttext::Vector::addVector (10 samples, 0.07%)</title><rect x="613.4" y="1941" width="0.8" height="15.0" fill="rgb(220,51,16)" rx="2" ry="2" />
<text  x="616.36" y="1951.5" ></text>
</g>
<g >
<title>c10::TensorOptions::computeDispatchKey (2 samples, 0.01%)</title><rect x="753.9" y="2005" width="0.1" height="15.0" fill="rgb(219,200,1)" rx="2" ry="2" />
<text  x="756.86" y="2015.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (70 samples, 0.48%)</title><rect x="1069.4" y="2053" width="5.6" height="15.0" fill="rgb(205,63,42)" rx="2" ry="2" />
<text  x="1072.38" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1183.1" y="1797" width="0.6" height="15.0" fill="rgb(227,30,30)" rx="2" ry="2" />
<text  x="1186.08" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="309" width="8.0" height="15.0" fill="rgb(228,80,41)" rx="2" ry="2" />
<text  x="62.09" y="319.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (17 samples, 0.12%)</title><rect x="437.0" y="1941" width="1.4" height="15.0" fill="rgb(227,209,44)" rx="2" ry="2" />
<text  x="440.05" y="1951.5" ></text>
</g>
<g >
<title>at::native::zeros (2 samples, 0.01%)</title><rect x="480.6" y="1925" width="0.1" height="15.0" fill="rgb(216,203,51)" rx="2" ry="2" />
<text  x="483.58" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="853" width="0.5" height="15.0" fill="rgb(213,129,51)" rx="2" ry="2" />
<text  x="1186.16" y="863.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1733" width="8.2" height="15.0" fill="rgb(235,53,23)" rx="2" ry="2" />
<text  x="62.01" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="446.1" y="1637" width="0.1" height="15.0" fill="rgb(220,50,36)" rx="2" ry="2" />
<text  x="449.06" y="1647.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (72 samples, 0.49%)</title><rect x="48.1" y="2037" width="5.8" height="15.0" fill="rgb(236,45,4)" rx="2" ry="2" />
<text  x="51.06" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1397" width="8.1" height="15.0" fill="rgb(232,83,10)" rx="2" ry="2" />
<text  x="62.09" y="1407.5" ></text>
</g>
<g >
<title>at::native::(anonymous namespace)::fill_kernel (2 samples, 0.01%)</title><rect x="66.8" y="37" width="0.2" height="15.0" fill="rgb(220,94,34)" rx="2" ry="2" />
<text  x="69.81" y="47.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="645" width="8.0" height="15.0" fill="rgb(205,219,50)" rx="2" ry="2" />
<text  x="62.09" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const&amp;&gt; (4 samples, 0.03%)</title><rect x="453.0" y="1941" width="0.3" height="15.0" fill="rgb(211,178,20)" rx="2" ry="2" />
<text  x="455.98" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1183.1" y="1909" width="0.6" height="15.0" fill="rgb(252,108,52)" rx="2" ry="2" />
<text  x="1186.08" y="1919.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (6 samples, 0.04%)</title><rect x="452.8" y="1973" width="0.5" height="15.0" fill="rgb(251,73,18)" rx="2" ry="2" />
<text  x="455.82" y="1983.5" ></text>
</g>
<g >
<title>mkl_blas_avx512_xsgemv (32 samples, 0.22%)</title><rect x="670.5" y="2021" width="2.6" height="15.0" fill="rgb(214,48,41)" rx="2" ry="2" />
<text  x="673.49" y="2031.5" ></text>
</g>
<g >
<title>c10::TensorImpl::~TensorImpl (2 samples, 0.01%)</title><rect x="481.0" y="1941" width="0.1" height="15.0" fill="rgb(213,129,30)" rx="2" ry="2" />
<text  x="483.99" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="1045" width="8.0" height="15.0" fill="rgb(254,130,24)" rx="2" ry="2" />
<text  x="62.09" y="1055.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="1147.0" y="2021" width="0.2" height="15.0" fill="rgb(237,72,51)" rx="2" ry="2" />
<text  x="1150.03" y="2031.5" ></text>
</g>
<g >
<title>at::Tensor::squeeze (6 samples, 0.04%)</title><rect x="471.7" y="1925" width="0.5" height="15.0" fill="rgb(233,51,53)" rx="2" ry="2" />
<text  x="474.73" y="1935.5" ></text>
</g>
<g >
<title>torch::autograd::impl::set_gradient_edge (5 samples, 0.03%)</title><rect x="734.0" y="2005" width="0.4" height="15.0" fill="rgb(240,39,22)" rx="2" ry="2" />
<text  x="736.98" y="2015.5" ></text>
</g>
<g >
<title>virtual thunk to std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_istringstream (6 samples, 0.04%)</title><rect x="737.5" y="2037" width="0.5" height="15.0" fill="rgb(247,116,4)" rx="2" ry="2" />
<text  x="740.52" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::operator[]&lt;char const&gt; (8 samples, 0.05%)</title><rect x="452.1" y="2005" width="0.6" height="15.0" fill="rgb(233,75,24)" rx="2" ry="2" />
<text  x="455.10" y="2015.5" ></text>
</g>
<g >
<title>TNewsCluster::CalcImportance (11 samples, 0.08%)</title><rect x="444.8" y="1973" width="0.9" height="15.0" fill="rgb(251,51,51)" rx="2" ry="2" />
<text  x="447.77" y="1983.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::add (32 samples, 0.22%)</title><rect x="179.7" y="1925" width="2.6" height="15.0" fill="rgb(228,89,17)" rx="2" ry="2" />
<text  x="182.71" y="1935.5" ></text>
</g>
<g >
<title>memcpy@plt (2 samples, 0.01%)</title><rect x="79.8" y="2021" width="0.1" height="15.0" fill="rgb(239,127,38)" rx="2" ry="2" />
<text  x="82.77" y="2031.5" ></text>
</g>
<g >
<title>nlohmann::operator== (3 samples, 0.02%)</title><rect x="456.8" y="1909" width="0.3" height="15.0" fill="rgb(215,45,27)" rx="2" ry="2" />
<text  x="459.85" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="736.3" y="2021" width="0.2" height="15.0" fill="rgb(223,91,8)" rx="2" ry="2" />
<text  x="739.31" y="2031.5" ></text>
</g>
<g >
<title>at::native::as_strided_tensorimpl (2 samples, 0.01%)</title><rect x="637.2" y="1989" width="0.1" height="15.0" fill="rgb(228,176,45)" rx="2" ry="2" />
<text  x="640.18" y="1999.5" ></text>
</g>
<g >
<title>at::checked_dense_tensor_unwrap (2 samples, 0.01%)</title><rect x="64.2" y="37" width="0.1" height="15.0" fill="rgb(234,113,38)" rx="2" ry="2" />
<text  x="67.16" y="47.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (3 samples, 0.02%)</title><rect x="453.9" y="1845" width="0.2" height="15.0" fill="rgb(209,124,9)" rx="2" ry="2" />
<text  x="456.87" y="1855.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (3 samples, 0.02%)</title><rect x="737.7" y="2005" width="0.2" height="15.0" fill="rgb(206,99,27)" rx="2" ry="2" />
<text  x="740.68" y="2015.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::~Dictionary (6 samples, 0.04%)</title><rect x="189.4" y="1989" width="0.4" height="15.0" fill="rgb(246,113,28)" rx="2" ry="2" />
<text  x="192.37" y="1999.5" ></text>
</g>
<g >
<title>posix_memalign (3 samples, 0.02%)</title><rect x="1146.4" y="2053" width="0.2" height="15.0" fill="rgb(225,227,3)" rx="2" ry="2" />
<text  x="1149.39" y="2063.5" ></text>
</g>
<g >
<title>at::TensorIterator::foreach_reduced_elt (3 samples, 0.02%)</title><rect x="1152.0" y="1829" width="0.3" height="15.0" fill="rgb(250,24,16)" rx="2" ry="2" />
<text  x="1155.02" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1182.3" y="1621" width="0.7" height="15.0" fill="rgb(241,128,44)" rx="2" ry="2" />
<text  x="1185.27" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="459.3" y="1461" width="0.4" height="15.0" fill="rgb(227,59,11)" rx="2" ry="2" />
<text  x="462.26" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="459.3" y="1685" width="0.4" height="15.0" fill="rgb(231,95,9)" rx="2" ry="2" />
<text  x="462.26" y="1695.5" ></text>
</g>
<g >
<title>torch::autograd::generated::DivBackward0::~DivBackward0 (2 samples, 0.01%)</title><rect x="735.7" y="2037" width="0.1" height="15.0" fill="rgb(240,129,39)" rx="2" ry="2" />
<text  x="738.67" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (151 samples, 1.03%)</title><rect x="55.5" y="1989" width="12.1" height="15.0" fill="rgb(223,196,51)" rx="2" ry="2" />
<text  x="58.47" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.3" y="1381" width="0.1" height="15.0" fill="rgb(240,22,5)" rx="2" ry="2" />
<text  x="462.26" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="460.1" y="1493" width="0.4" height="15.0" fill="rgb(226,208,22)" rx="2" ry="2" />
<text  x="463.14" y="1503.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (4 samples, 0.03%)</title><rect x="1186.9" y="2053" width="0.4" height="15.0" fill="rgb(233,69,17)" rx="2" ry="2" />
<text  x="1189.94" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (155 samples, 1.06%)</title><rect x="55.3" y="2005" width="12.5" height="15.0" fill="rgb(246,121,27)" rx="2" ry="2" />
<text  x="58.30" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="469" width="0.6" height="15.0" fill="rgb(234,161,25)" rx="2" ry="2" />
<text  x="1185.36" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1183.1" y="1685" width="0.6" height="15.0" fill="rgb(211,201,28)" rx="2" ry="2" />
<text  x="1186.08" y="1695.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::t (3 samples, 0.02%)</title><rect x="734.9" y="2037" width="0.3" height="15.0" fill="rgb(241,27,7)" rx="2" ry="2" />
<text  x="737.95" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1429" width="8.1" height="15.0" fill="rgb(239,110,43)" rx="2" ry="2" />
<text  x="62.09" y="1439.5" ></text>
</g>
<g >
<title>std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt;::vector (2 samples, 0.01%)</title><rect x="428.1" y="1989" width="0.2" height="15.0" fill="rgb(209,112,10)" rx="2" ry="2" />
<text  x="431.12" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="446.1" y="1557" width="0.1" height="15.0" fill="rgb(210,142,33)" rx="2" ry="2" />
<text  x="449.06" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1183.2" y="37" width="0.2" height="15.0" fill="rgb(245,98,38)" rx="2" ry="2" />
<text  x="1186.24" y="47.5" ></text>
</g>
<g >
<title>at::CPUType::mm (2 samples, 0.01%)</title><rect x="735.8" y="2005" width="0.2" height="15.0" fill="rgb(207,130,41)" rx="2" ry="2" />
<text  x="738.83" y="2015.5" ></text>
</g>
<g >
<title>cfree (2 samples, 0.01%)</title><rect x="440.0" y="1909" width="0.2" height="15.0" fill="rgb(243,14,19)" rx="2" ry="2" />
<text  x="443.03" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="445.9" y="1893" width="0.3" height="15.0" fill="rgb(241,38,37)" rx="2" ry="2" />
<text  x="448.90" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1765" width="0.7" height="15.0" fill="rgb(209,221,10)" rx="2" ry="2" />
<text  x="1185.27" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.2" y="229" width="0.5" height="15.0" fill="rgb(236,190,13)" rx="2" ry="2" />
<text  x="1186.24" y="239.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (2 samples, 0.01%)</title><rect x="1186.3" y="2053" width="0.2" height="15.0" fill="rgb(206,43,37)" rx="2" ry="2" />
<text  x="1189.30" y="2063.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::squeeze_dim (3 samples, 0.02%)</title><rect x="471.8" y="1909" width="0.3" height="15.0" fill="rgb(246,190,25)" rx="2" ry="2" />
<text  x="474.81" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (21 samples, 0.14%)</title><rect x="458.9" y="1909" width="1.6" height="15.0" fill="rgb(220,70,10)" rx="2" ry="2" />
<text  x="461.86" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1181.9" y="1909" width="0.1" height="15.0" fill="rgb(213,187,15)" rx="2" ry="2" />
<text  x="1184.87" y="1919.5" ></text>
</g>
<g >
<title>fasttext::Vector::mul (12 samples, 0.08%)</title><rect x="614.2" y="1941" width="0.9" height="15.0" fill="rgb(205,46,33)" rx="2" ry="2" />
<text  x="617.16" y="1951.5" ></text>
</g>
<g >
<title>at::Tensor::suggest_memory_format (2 samples, 0.01%)</title><rect x="73.0" y="2005" width="0.2" height="15.0" fill="rgb(250,20,26)" rx="2" ry="2" />
<text  x="76.01" y="2015.5" ></text>
</g>
<g >
<title>TDbDocument::TDbDocument (2 samples, 0.01%)</title><rect x="427.9" y="2005" width="0.1" height="15.0" fill="rgb(229,168,39)" rx="2" ry="2" />
<text  x="430.88" y="2015.5" ></text>
</g>
<g >
<title>at::TensorIterator::compute_names@plt (3 samples, 0.02%)</title><rect x="64.8" y="37" width="0.2" height="15.0" fill="rgb(253,74,52)" rx="2" ry="2" />
<text  x="67.80" y="47.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (3 samples, 0.02%)</title><rect x="72.0" y="2005" width="0.3" height="15.0" fill="rgb(250,133,9)" rx="2" ry="2" />
<text  x="75.04" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="1221" width="0.6" height="15.0" fill="rgb(214,38,14)" rx="2" ry="2" />
<text  x="1185.36" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="549" width="0.5" height="15.0" fill="rgb(233,11,7)" rx="2" ry="2" />
<text  x="1186.16" y="559.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="261" width="8.0" height="15.0" fill="rgb(212,151,41)" rx="2" ry="2" />
<text  x="62.09" y="271.5" ></text>
</g>
<g >
<title>c10::ClassType::isSubtypeOfExt (2 samples, 0.01%)</title><rect x="634.1" y="2037" width="0.2" height="15.0" fill="rgb(247,110,25)" rx="2" ry="2" />
<text  x="637.12" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (3 samples, 0.02%)</title><rect x="176.3" y="1925" width="0.3" height="15.0" fill="rgb(215,135,15)" rx="2" ry="2" />
<text  x="179.33" y="1935.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (6 samples, 0.04%)</title><rect x="738.3" y="2037" width="0.5" height="15.0" fill="rgb(247,196,11)" rx="2" ry="2" />
<text  x="741.33" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1173" width="0.5" height="15.0" fill="rgb(247,56,43)" rx="2" ry="2" />
<text  x="1186.16" y="1183.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (11 samples, 0.08%)</title><rect x="460.8" y="1941" width="0.9" height="15.0" fill="rgb(245,200,3)" rx="2" ry="2" />
<text  x="463.79" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="565" width="0.5" height="15.0" fill="rgb(229,184,11)" rx="2" ry="2" />
<text  x="1186.16" y="575.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="174.5" y="1957" width="0.1" height="15.0" fill="rgb(243,135,19)" rx="2" ry="2" />
<text  x="177.48" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="1093" width="8.0" height="15.0" fill="rgb(213,152,51)" rx="2" ry="2" />
<text  x="62.09" y="1103.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.70%)</title><rect x="59.0" y="1845" width="8.2" height="15.0" fill="rgb(246,84,4)" rx="2" ry="2" />
<text  x="62.01" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="149" width="8.0" height="15.0" fill="rgb(225,81,35)" rx="2" ry="2" />
<text  x="62.09" y="159.5" ></text>
</g>
<g >
<title>memcpy@plt (2 samples, 0.01%)</title><rect x="670.0" y="2037" width="0.2" height="15.0" fill="rgb(241,162,9)" rx="2" ry="2" />
<text  x="673.01" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="437" width="0.6" height="15.0" fill="rgb(252,54,9)" rx="2" ry="2" />
<text  x="1185.36" y="447.5" ></text>
</g>
<g >
<title>at::native::norm (10 samples, 0.07%)</title><rect x="1151.6" y="1893" width="0.8" height="15.0" fill="rgb(232,138,28)" rx="2" ry="2" />
<text  x="1154.62" y="1903.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_get_insert_unique_pos (7 samples, 0.05%)</title><rect x="441.4" y="1925" width="0.6" height="15.0" fill="rgb(209,199,6)" rx="2" ry="2" />
<text  x="444.40" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="917" width="0.6" height="15.0" fill="rgb(224,45,19)" rx="2" ry="2" />
<text  x="1185.36" y="927.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (1,602 samples, 10.92%)</title><rect x="864.8" y="2053" width="128.9" height="15.0" fill="rgb(252,161,40)" rx="2" ry="2" />
<text  x="867.82" y="2063.5" >fasttext::Produc..</text>
</g>
<g >
<title>std::istream::peek (2 samples, 0.01%)</title><rect x="458.2" y="1941" width="0.2" height="15.0" fill="rgb(233,73,32)" rx="2" ry="2" />
<text  x="461.21" y="1951.5" ></text>
</g>
<g >
<title>torch::autograd::impl::grad_accumulator (2 samples, 0.01%)</title><rect x="640.1" y="1989" width="0.1" height="15.0" fill="rgb(220,218,48)" rx="2" ry="2" />
<text  x="643.07" y="1999.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::load (8 samples, 0.05%)</title><rect x="816.5" y="2053" width="0.7" height="15.0" fill="rgb(245,225,38)" rx="2" ry="2" />
<text  x="819.54" y="2063.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.01%)</title><rect x="439.2" y="1941" width="0.2" height="15.0" fill="rgb(235,16,45)" rx="2" ry="2" />
<text  x="442.22" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="37" width="0.3" height="15.0" fill="rgb(220,179,41)" rx="2" ry="2" />
<text  x="1186.40" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="661" width="0.6" height="15.0" fill="rgb(209,106,35)" rx="2" ry="2" />
<text  x="1185.36" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="459.5" y="1301" width="0.2" height="15.0" fill="rgb(211,106,49)" rx="2" ry="2" />
<text  x="462.50" y="1311.5" ></text>
</g>
<g >
<title>.omp_outlined. (520 samples, 3.55%)</title><rect x="131.7" y="2005" width="41.9" height="15.0" fill="rgb(236,149,41)" rx="2" ry="2" />
<text  x="134.75" y="2015.5" >.om..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (108 samples, 0.74%)</title><rect x="1154.9" y="2053" width="8.7" height="15.0" fill="rgb(236,48,35)" rx="2" ry="2" />
<text  x="1157.92" y="2063.5" ></text>
</g>
<g >
<title>at::Tensor::data_ptr&lt;float&gt; (2 samples, 0.01%)</title><rect x="471.6" y="1925" width="0.1" height="15.0" fill="rgb(233,217,23)" rx="2" ry="2" />
<text  x="474.57" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (101 samples, 0.69%)</title><rect x="59.1" y="1461" width="8.1" height="15.0" fill="rgb(242,164,11)" rx="2" ry="2" />
<text  x="62.09" y="1471.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::vector (3 samples, 0.02%)</title><rect x="453.1" y="1909" width="0.2" height="15.0" fill="rgb(250,129,20)" rx="2" ry="2" />
<text  x="456.06" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="581" width="8.0" height="15.0" fill="rgb(246,40,43)" rx="2" ry="2" />
<text  x="62.09" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1183.1" y="1717" width="0.6" height="15.0" fill="rgb(212,223,42)" rx="2" ry="2" />
<text  x="1186.08" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="459.3" y="1557" width="0.4" height="15.0" fill="rgb(251,202,29)" rx="2" ry="2" />
<text  x="462.26" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="1541" width="0.5" height="15.0" fill="rgb(242,26,37)" rx="2" ry="2" />
<text  x="1186.16" y="1551.5" ></text>
</g>
<g >
<title>memcpy@plt (7 samples, 0.05%)</title><rect x="1021.6" y="2053" width="0.5" height="15.0" fill="rgb(214,111,42)" rx="2" ry="2" />
<text  x="1024.58" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="1183.0" y="1957" width="0.7" height="15.0" fill="rgb(222,136,9)" rx="2" ry="2" />
<text  x="1186.00" y="1967.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (2 samples, 0.01%)</title><rect x="47.0" y="2021" width="0.2" height="15.0" fill="rgb(208,147,25)" rx="2" ry="2" />
<text  x="50.02" y="2031.5" ></text>
</g>
<g >
<title>caffe2::TypeMeta::_typeMetaDataInstance&lt;unsigned char&gt; (2 samples, 0.01%)</title><rect x="471.6" y="1909" width="0.1" height="15.0" fill="rgb(247,128,35)" rx="2" ry="2" />
<text  x="474.57" y="1919.5" ></text>
</g>
<g >
<title>torch::autograd::make_variable (4 samples, 0.03%)</title><rect x="478.1" y="1909" width="0.3" height="15.0" fill="rgb(221,187,34)" rx="2" ry="2" />
<text  x="481.09" y="1919.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="458.5" y="1941" width="0.1" height="15.0" fill="rgb(229,209,20)" rx="2" ry="2" />
<text  x="461.45" y="1951.5" ></text>
</g>
<g >
<title>c10::KernelFunction::make_boxed_function&lt;&amp;(anonymous namespace)::variable_fallback_kernel&gt; (2 samples, 0.01%)</title><rect x="734.2" y="1989" width="0.2" height="15.0" fill="rgb(212,184,31)" rx="2" ry="2" />
<text  x="737.22" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="853" width="8.0" height="15.0" fill="rgb(230,138,21)" rx="2" ry="2" />
<text  x="62.09" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1205" width="0.5" height="15.0" fill="rgb(227,43,43)" rx="2" ry="2" />
<text  x="1186.16" y="1215.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (7 samples, 0.05%)</title><rect x="467.0" y="1941" width="0.5" height="15.0" fill="rgb(253,37,9)" rx="2" ry="2" />
<text  x="469.98" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1541" width="0.7" height="15.0" fill="rgb(206,92,51)" rx="2" ry="2" />
<text  x="1185.27" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1183.2" y="1269" width="0.5" height="15.0" fill="rgb(214,89,20)" rx="2" ry="2" />
<text  x="1186.16" y="1279.5" ></text>
</g>
<g >
<title>TAnnotator::~TAnnotator (7 samples, 0.05%)</title><rect x="189.3" y="2005" width="0.5" height="15.0" fill="rgb(207,82,46)" rx="2" ry="2" />
<text  x="192.29" y="2015.5" ></text>
</g>
<g >
<title>c10::TensorImpl::release_resources (5 samples, 0.03%)</title><rect x="641.4" y="2005" width="0.4" height="15.0" fill="rgb(207,79,6)" rx="2" ry="2" />
<text  x="644.36" y="2015.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;::PlainObjectBase&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt; &gt; (20 samples, 0.14%)</title><rect x="415.2" y="1941" width="1.7" height="15.0" fill="rgb(218,109,40)" rx="2" ry="2" />
<text  x="418.24" y="1951.5" ></text>
</g>
<g >
<title>onmt::add_final_token&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (26 samples, 0.18%)</title><rect x="1061.8" y="2053" width="2.1" height="15.0" fill="rgb(253,195,1)" rx="2" ry="2" />
<text  x="1064.81" y="2063.5" ></text>
</g>
<g >
<title>c10::TensorImpl::TensorImpl (3 samples, 0.02%)</title><rect x="635.2" y="2037" width="0.2" height="15.0" fill="rgb(227,178,44)" rx="2" ry="2" />
<text  x="638.17" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="1182.4" y="277" width="0.6" height="15.0" fill="rgb(254,194,21)" rx="2" ry="2" />
<text  x="1185.36" y="287.5" ></text>
</g>
<g >
<title>[unknown] (213 samples, 1.45%)</title><rect x="55.1" y="2021" width="17.2" height="15.0" fill="rgb(212,219,44)" rx="2" ry="2" />
<text  x="58.14" y="2031.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (2 samples, 0.01%)</title><rect x="69.7" y="2005" width="0.2" height="15.0" fill="rgb(254,29,4)" rx="2" ry="2" />
<text  x="72.71" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (21 samples, 0.14%)</title><rect x="458.9" y="1893" width="1.6" height="15.0" fill="rgb(219,92,50)" rx="2" ry="2" />
<text  x="461.86" y="1903.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (2 samples, 0.01%)</title><rect x="453.9" y="1829" width="0.2" height="15.0" fill="rgb(215,13,53)" rx="2" ry="2" />
<text  x="456.95" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.5" y="1317" width="0.2" height="15.0" fill="rgb(208,214,15)" rx="2" ry="2" />
<text  x="462.50" y="1327.5" ></text>
</g>
<g >
<title>torch::autograd::generated::MmBackward::~MmBackward (6 samples, 0.04%)</title><rect x="735.8" y="2037" width="0.5" height="15.0" fill="rgb(248,39,50)" rx="2" ry="2" />
<text  x="738.83" y="2047.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0, 1&gt;::run (520 samples, 3.55%)</title><rect x="131.7" y="1989" width="41.9" height="15.0" fill="rgb(214,144,53)" rx="2" ry="2" />
<text  x="134.75" y="1999.5" >Eig..</text>
</g>
<g >
<title>syscall (2 samples, 0.01%)</title><rect x="189.1" y="1973" width="0.2" height="15.0" fill="rgb(246,73,43)" rx="2" ry="2" />
<text  x="192.12" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="1182.4" y="837" width="0.6" height="15.0" fill="rgb(209,136,28)" rx="2" ry="2" />
<text  x="1185.36" y="847.5" ></text>
</g>
<g >
<title>[unknown] (100 samples, 0.68%)</title><rect x="59.1" y="1061" width="8.0" height="15.0" fill="rgb(241,210,33)" rx="2" ry="2" />
<text  x="62.09" y="1071.5" ></text>
</g>
<g >
<title>caffe2::TypeMeta::_typeMetaDataInstance&lt;float&gt; (3 samples, 0.02%)</title><rect x="481.1" y="1941" width="0.3" height="15.0" fill="rgb(219,50,53)" rx="2" ry="2" />
<text  x="484.15" y="1951.5" ></text>
</g>
<g >
<title>__tls_get_addr (2 samples, 0.01%)</title><rect x="750.4" y="2005" width="0.2" height="15.0" fill="rgb(245,13,40)" rx="2" ry="2" />
<text  x="753.40" y="2015.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (3 samples, 0.02%)</title><rect x="440.0" y="1925" width="0.3" height="15.0" fill="rgb(219,227,16)" rx="2" ry="2" />
<text  x="443.03" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="1182.3" y="1605" width="0.7" height="15.0" fill="rgb(231,17,15)" rx="2" ry="2" />
<text  x="1185.27" y="1615.5" ></text>
</g>
<g >
<title>TFastTextEmbedder::CalcEmbedding (144 samples, 0.98%)</title><rect x="467.7" y="1941" width="11.6" height="15.0" fill="rgb(241,173,17)" rx="2" ry="2" />
<text  x="470.71" y="1951.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (5 samples, 0.03%)</title><rect x="1185.0" y="2053" width="0.4" height="15.0" fill="rgb(251,157,4)" rx="2" ry="2" />
<text  x="1188.01" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="1183.2" y="677" width="0.5" height="15.0" fill="rgb(250,116,22)" rx="2" ry="2" />
<text  x="1186.16" y="687.5" ></text>
</g>
<g >
<title>__tls_get_addr (2 samples, 0.01%)</title><rect x="636.2" y="1989" width="0.2" height="15.0" fill="rgb(230,152,5)" rx="2" ry="2" />
<text  x="639.21" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="459.5" y="1333" width="0.2" height="15.0" fill="rgb(212,1,53)" rx="2" ry="2" />
<text  x="462.50" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="445.9" y="1541" width="0.2" height="15.0" fill="rgb(248,0,13)" rx="2" ry="2" />
<text  x="448.90" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="1182.4" y="69" width="0.6" height="15.0" fill="rgb(249,225,36)" rx="2" ry="2" />
<text  x="1185.44" y="79.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="816.4" y="2037" width="0.1" height="15.0" fill="rgb(239,203,41)" rx="2" ry="2" />
<text  x="819.38" y="2047.5" ></text>
</g>
<g >
<title>at::CPUType::add_Tensor (7 samples, 0.05%)</title><rect x="1151.0" y="1909" width="0.5" height="15.0" fill="rgb(249,56,2)" rx="2" ry="2" />
<text  x="1153.97" y="1919.5" ></text>
</g>
</g>
</svg>
